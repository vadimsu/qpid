# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cproton', [dirname(__file__)])
        except ImportError:
            import _cproton
            return _cproton
        if fp is not None:
            try:
                _mod = imp.load_module('_cproton', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cproton = swig_import_helper()
    del swig_import_helper
else:
    import _cproton
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def pn_message_load(*args):
  return _cproton.pn_message_load(*args)
pn_message_load = _cproton.pn_message_load

def pn_message_load_data(*args):
  return _cproton.pn_message_load_data(*args)
pn_message_load_data = _cproton.pn_message_load_data

def pn_message_load_text(*args):
  return _cproton.pn_message_load_text(*args)
pn_message_load_text = _cproton.pn_message_load_text

def pn_message_load_amqp(*args):
  return _cproton.pn_message_load_amqp(*args)
pn_message_load_amqp = _cproton.pn_message_load_amqp

def pn_message_load_json(*args):
  return _cproton.pn_message_load_json(*args)
pn_message_load_json = _cproton.pn_message_load_json

def pn_message_encode(*args):
  return _cproton.pn_message_encode(*args)
pn_message_encode = _cproton.pn_message_encode

def pn_message_save(*args):
  return _cproton.pn_message_save(*args)
pn_message_save = _cproton.pn_message_save

def pn_message_save_data(*args):
  return _cproton.pn_message_save_data(*args)
pn_message_save_data = _cproton.pn_message_save_data

def pn_message_save_text(*args):
  return _cproton.pn_message_save_text(*args)
pn_message_save_text = _cproton.pn_message_save_text

def pn_message_save_amqp(*args):
  return _cproton.pn_message_save_amqp(*args)
pn_message_save_amqp = _cproton.pn_message_save_amqp

def pn_message_save_json(*args):
  return _cproton.pn_message_save_json(*args)
pn_message_save_json = _cproton.pn_message_save_json

def pn_link_send(*args):
  return _cproton.pn_link_send(*args)
pn_link_send = _cproton.pn_link_send

def pn_link_recv(*args):
  return _cproton.pn_link_recv(*args)
pn_link_recv = _cproton.pn_link_recv

def pn_transport_push(*args):
  return _cproton.pn_transport_push(*args)
pn_transport_push = _cproton.pn_transport_push

def pn_transport_peek(*args):
  return _cproton.pn_transport_peek(*args)
pn_transport_peek = _cproton.pn_transport_peek

def pn_transport_input(*args):
  return _cproton.pn_transport_input(*args)
pn_transport_input = _cproton.pn_transport_input

def pn_transport_output(*args):
  return _cproton.pn_transport_output(*args)
pn_transport_output = _cproton.pn_transport_output

def pn_delivery(*args):
  return _cproton.pn_delivery(*args)
pn_delivery = _cproton.pn_delivery

def pn_delivery_tag(*args):
  return _cproton.pn_delivery_tag(*args)
pn_delivery_tag = _cproton.pn_delivery_tag

def pn_message_data(*args):
  return _cproton.pn_message_data(*args)
pn_message_data = _cproton.pn_message_data

def pn_listener_set_context(*args):
  return _cproton.pn_listener_set_context(*args)
pn_listener_set_context = _cproton.pn_listener_set_context

def pn_listener_context(*args):
  return _cproton.pn_listener_context(*args)
pn_listener_context = _cproton.pn_listener_context

def pn_connector_set_context(*args):
  return _cproton.pn_connector_set_context(*args)
pn_connector_set_context = _cproton.pn_connector_set_context

def pn_connector_context(*args):
  return _cproton.pn_connector_context(*args)
pn_connector_context = _cproton.pn_connector_context

def pn_connection_get_context(*args):
  return _cproton.pn_connection_get_context(*args)
pn_connection_get_context = _cproton.pn_connection_get_context

def pn_connection_set_context(*args):
  return _cproton.pn_connection_set_context(*args)
pn_connection_set_context = _cproton.pn_connection_set_context

def pn_session_get_context(*args):
  return _cproton.pn_session_get_context(*args)
pn_session_get_context = _cproton.pn_session_get_context

def pn_session_set_context(*args):
  return _cproton.pn_session_set_context(*args)
pn_session_set_context = _cproton.pn_session_set_context

def pn_link_get_context(*args):
  return _cproton.pn_link_get_context(*args)
pn_link_get_context = _cproton.pn_link_get_context

def pn_link_set_context(*args):
  return _cproton.pn_link_set_context(*args)
pn_link_set_context = _cproton.pn_link_set_context

def pn_delivery_get_context(*args):
  return _cproton.pn_delivery_get_context(*args)
pn_delivery_get_context = _cproton.pn_delivery_get_context

def pn_delivery_set_context(*args):
  return _cproton.pn_delivery_set_context(*args)
pn_delivery_set_context = _cproton.pn_delivery_set_context

def pn_data_decode(*args):
  return _cproton.pn_data_decode(*args)
pn_data_decode = _cproton.pn_data_decode

def pn_data_encode(*args):
  return _cproton.pn_data_encode(*args)
pn_data_encode = _cproton.pn_data_encode

def pn_sasl_recv(*args):
  return _cproton.pn_sasl_recv(*args)
pn_sasl_recv = _cproton.pn_sasl_recv

def pn_data_format(*args):
  return _cproton.pn_data_format(*args)
pn_data_format = _cproton.pn_data_format

def pn_ssl_get_cipher_name(*args):
  return _cproton.pn_ssl_get_cipher_name(*args)
pn_ssl_get_cipher_name = _cproton.pn_ssl_get_cipher_name

def pn_ssl_get_protocol_name(*args):
  return _cproton.pn_ssl_get_protocol_name(*args)
pn_ssl_get_protocol_name = _cproton.pn_ssl_get_protocol_name

def pn_ssl_get_peer_hostname(*args):
  return _cproton.pn_ssl_get_peer_hostname(*args)
pn_ssl_get_peer_hostname = _cproton.pn_ssl_get_peer_hostname
PROTON_IMPORT_EXPORT_H = _cproton.PROTON_IMPORT_EXPORT_H
PROTON_TYPES_H = _cproton.PROTON_TYPES_H
class pn_decimal128_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pn_decimal128_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pn_decimal128_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _cproton.pn_decimal128_t_bytes_set
    __swig_getmethods__["bytes"] = _cproton.pn_decimal128_t_bytes_get
    if _newclass:bytes = _swig_property(_cproton.pn_decimal128_t_bytes_get, _cproton.pn_decimal128_t_bytes_set)
    def __init__(self): 
        this = _cproton.new_pn_decimal128_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cproton.delete_pn_decimal128_t
    __del__ = lambda self : None;
pn_decimal128_t_swigregister = _cproton.pn_decimal128_t_swigregister
pn_decimal128_t_swigregister(pn_decimal128_t)

class pn_uuid_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pn_uuid_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pn_uuid_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _cproton.pn_uuid_t_bytes_set
    __swig_getmethods__["bytes"] = _cproton.pn_uuid_t_bytes_get
    if _newclass:bytes = _swig_property(_cproton.pn_uuid_t_bytes_get, _cproton.pn_uuid_t_bytes_set)
    def __init__(self): 
        this = _cproton.new_pn_uuid_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cproton.delete_pn_uuid_t
    __del__ = lambda self : None;
pn_uuid_t_swigregister = _cproton.pn_uuid_t_swigregister
pn_uuid_t_swigregister(pn_uuid_t)

class pn_bytes_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pn_bytes_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pn_bytes_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _cproton.pn_bytes_t_size_set
    __swig_getmethods__["size"] = _cproton.pn_bytes_t_size_get
    if _newclass:size = _swig_property(_cproton.pn_bytes_t_size_get, _cproton.pn_bytes_t_size_set)
    __swig_setmethods__["start"] = _cproton.pn_bytes_t_start_set
    __swig_getmethods__["start"] = _cproton.pn_bytes_t_start_get
    if _newclass:start = _swig_property(_cproton.pn_bytes_t_start_get, _cproton.pn_bytes_t_start_set)
    def __init__(self): 
        this = _cproton.new_pn_bytes_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cproton.delete_pn_bytes_t
    __del__ = lambda self : None;
pn_bytes_t_swigregister = _cproton.pn_bytes_t_swigregister
pn_bytes_t_swigregister(pn_bytes_t)


def pn_bytes(*args):
  return _cproton.pn_bytes(*args)
pn_bytes = _cproton.pn_bytes

def pn_bytes_dup(*args):
  return _cproton.pn_bytes_dup(*args)
pn_bytes_dup = _cproton.pn_bytes_dup
PROTON_OBJECT_H = _cproton.PROTON_OBJECT_H
class pn_class_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pn_class_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pn_class_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["initialize"] = _cproton.pn_class_t_initialize_set
    __swig_getmethods__["initialize"] = _cproton.pn_class_t_initialize_get
    if _newclass:initialize = _swig_property(_cproton.pn_class_t_initialize_get, _cproton.pn_class_t_initialize_set)
    __swig_setmethods__["finalize"] = _cproton.pn_class_t_finalize_set
    __swig_getmethods__["finalize"] = _cproton.pn_class_t_finalize_get
    if _newclass:finalize = _swig_property(_cproton.pn_class_t_finalize_get, _cproton.pn_class_t_finalize_set)
    __swig_setmethods__["hashcode"] = _cproton.pn_class_t_hashcode_set
    __swig_getmethods__["hashcode"] = _cproton.pn_class_t_hashcode_get
    if _newclass:hashcode = _swig_property(_cproton.pn_class_t_hashcode_get, _cproton.pn_class_t_hashcode_set)
    __swig_setmethods__["compare"] = _cproton.pn_class_t_compare_set
    __swig_getmethods__["compare"] = _cproton.pn_class_t_compare_get
    if _newclass:compare = _swig_property(_cproton.pn_class_t_compare_get, _cproton.pn_class_t_compare_set)
    __swig_setmethods__["inspect"] = _cproton.pn_class_t_inspect_set
    __swig_getmethods__["inspect"] = _cproton.pn_class_t_inspect_get
    if _newclass:inspect = _swig_property(_cproton.pn_class_t_inspect_get, _cproton.pn_class_t_inspect_set)
    def __init__(self): 
        this = _cproton.new_pn_class_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cproton.delete_pn_class_t
    __del__ = lambda self : None;
pn_class_t_swigregister = _cproton.pn_class_t_swigregister
pn_class_t_swigregister(pn_class_t)


def pn_new(*args):
  return _cproton.pn_new(*args)
pn_new = _cproton.pn_new

def pn_initialize(*args):
  return _cproton.pn_initialize(*args)
pn_initialize = _cproton.pn_initialize

def pn_incref(*args):
  return _cproton.pn_incref(*args)
pn_incref = _cproton.pn_incref

def pn_decref(*args):
  return _cproton.pn_decref(*args)
pn_decref = _cproton.pn_decref

def pn_refcount(*args):
  return _cproton.pn_refcount(*args)
pn_refcount = _cproton.pn_refcount

def pn_finalize(*args):
  return _cproton.pn_finalize(*args)
pn_finalize = _cproton.pn_finalize

def pn_free(*args):
  return _cproton.pn_free(*args)
pn_free = _cproton.pn_free

def pn_class(*args):
  return _cproton.pn_class(*args)
pn_class = _cproton.pn_class

def pn_hashcode(*args):
  return _cproton.pn_hashcode(*args)
pn_hashcode = _cproton.pn_hashcode

def pn_compare(*args):
  return _cproton.pn_compare(*args)
pn_compare = _cproton.pn_compare

def pn_equals(*args):
  return _cproton.pn_equals(*args)
pn_equals = _cproton.pn_equals

def pn_inspect(*args):
  return _cproton.pn_inspect(*args)
pn_inspect = _cproton.pn_inspect
PN_REFCOUNT = _cproton.PN_REFCOUNT

def pn_list(*args):
  return _cproton.pn_list(*args)
pn_list = _cproton.pn_list

def pn_list_size(*args):
  return _cproton.pn_list_size(*args)
pn_list_size = _cproton.pn_list_size

def pn_list_get(*args):
  return _cproton.pn_list_get(*args)
pn_list_get = _cproton.pn_list_get

def pn_list_set(*args):
  return _cproton.pn_list_set(*args)
pn_list_set = _cproton.pn_list_set

def pn_list_add(*args):
  return _cproton.pn_list_add(*args)
pn_list_add = _cproton.pn_list_add

def pn_list_index(*args):
  return _cproton.pn_list_index(*args)
pn_list_index = _cproton.pn_list_index

def pn_list_remove(*args):
  return _cproton.pn_list_remove(*args)
pn_list_remove = _cproton.pn_list_remove

def pn_list_del(*args):
  return _cproton.pn_list_del(*args)
pn_list_del = _cproton.pn_list_del

def pn_list_clear(*args):
  return _cproton.pn_list_clear(*args)
pn_list_clear = _cproton.pn_list_clear

def pn_list_iterator(*args):
  return _cproton.pn_list_iterator(*args)
pn_list_iterator = _cproton.pn_list_iterator
PN_REFCOUNT_KEY = _cproton.PN_REFCOUNT_KEY
PN_REFCOUNT_VALUE = _cproton.PN_REFCOUNT_VALUE

def pn_map(*args):
  return _cproton.pn_map(*args)
pn_map = _cproton.pn_map

def pn_map_size(*args):
  return _cproton.pn_map_size(*args)
pn_map_size = _cproton.pn_map_size

def pn_map_put(*args):
  return _cproton.pn_map_put(*args)
pn_map_put = _cproton.pn_map_put

def pn_map_get(*args):
  return _cproton.pn_map_get(*args)
pn_map_get = _cproton.pn_map_get

def pn_map_del(*args):
  return _cproton.pn_map_del(*args)
pn_map_del = _cproton.pn_map_del

def pn_map_head(*args):
  return _cproton.pn_map_head(*args)
pn_map_head = _cproton.pn_map_head

def pn_map_next(*args):
  return _cproton.pn_map_next(*args)
pn_map_next = _cproton.pn_map_next

def pn_map_key(*args):
  return _cproton.pn_map_key(*args)
pn_map_key = _cproton.pn_map_key

def pn_map_value(*args):
  return _cproton.pn_map_value(*args)
pn_map_value = _cproton.pn_map_value

def pn_hash(*args):
  return _cproton.pn_hash(*args)
pn_hash = _cproton.pn_hash

def pn_hash_size(*args):
  return _cproton.pn_hash_size(*args)
pn_hash_size = _cproton.pn_hash_size

def pn_hash_put(*args):
  return _cproton.pn_hash_put(*args)
pn_hash_put = _cproton.pn_hash_put

def pn_hash_get(*args):
  return _cproton.pn_hash_get(*args)
pn_hash_get = _cproton.pn_hash_get

def pn_hash_del(*args):
  return _cproton.pn_hash_del(*args)
pn_hash_del = _cproton.pn_hash_del

def pn_hash_head(*args):
  return _cproton.pn_hash_head(*args)
pn_hash_head = _cproton.pn_hash_head

def pn_hash_next(*args):
  return _cproton.pn_hash_next(*args)
pn_hash_next = _cproton.pn_hash_next

def pn_hash_key(*args):
  return _cproton.pn_hash_key(*args)
pn_hash_key = _cproton.pn_hash_key

def pn_hash_value(*args):
  return _cproton.pn_hash_value(*args)
pn_hash_value = _cproton.pn_hash_value

def pn_string(*args):
  return _cproton.pn_string(*args)
pn_string = _cproton.pn_string

def pn_stringn(*args):
  return _cproton.pn_stringn(*args)
pn_stringn = _cproton.pn_stringn

def pn_string_get(*args):
  return _cproton.pn_string_get(*args)
pn_string_get = _cproton.pn_string_get

def pn_string_size(*args):
  return _cproton.pn_string_size(*args)
pn_string_size = _cproton.pn_string_size

def pn_string_set(*args):
  return _cproton.pn_string_set(*args)
pn_string_set = _cproton.pn_string_set

def pn_string_setn(*args):
  return _cproton.pn_string_setn(*args)
pn_string_setn = _cproton.pn_string_setn

def pn_string_put(*args):
  return _cproton.pn_string_put(*args)
pn_string_put = _cproton.pn_string_put

def pn_string_clear(*args):
  return _cproton.pn_string_clear(*args)
pn_string_clear = _cproton.pn_string_clear

def pn_string_format(*args):
  return _cproton.pn_string_format(*args)
pn_string_format = _cproton.pn_string_format

def pn_string_addf(*args):
  return _cproton.pn_string_addf(*args)
pn_string_addf = _cproton.pn_string_addf

def pn_string_grow(*args):
  return _cproton.pn_string_grow(*args)
pn_string_grow = _cproton.pn_string_grow

def pn_string_buffer(*args):
  return _cproton.pn_string_buffer(*args)
pn_string_buffer = _cproton.pn_string_buffer

def pn_string_capacity(*args):
  return _cproton.pn_string_capacity(*args)
pn_string_capacity = _cproton.pn_string_capacity

def pn_string_resize(*args):
  return _cproton.pn_string_resize(*args)
pn_string_resize = _cproton.pn_string_resize

def pn_string_copy(*args):
  return _cproton.pn_string_copy(*args)
pn_string_copy = _cproton.pn_string_copy

def pn_iterator():
  return _cproton.pn_iterator()
pn_iterator = _cproton.pn_iterator

def pn_iterator_start(*args):
  return _cproton.pn_iterator_start(*args)
pn_iterator_start = _cproton.pn_iterator_start

def pn_iterator_next(*args):
  return _cproton.pn_iterator_next(*args)
pn_iterator_next = _cproton.pn_iterator_next
PROTON_ERROR_H = _cproton.PROTON_ERROR_H
PN_EOS = _cproton.PN_EOS
PN_ERR = _cproton.PN_ERR
PN_OVERFLOW = _cproton.PN_OVERFLOW
PN_UNDERFLOW = _cproton.PN_UNDERFLOW
PN_STATE_ERR = _cproton.PN_STATE_ERR
PN_ARG_ERR = _cproton.PN_ARG_ERR
PN_TIMEOUT = _cproton.PN_TIMEOUT
PN_INTR = _cproton.PN_INTR
PN_INPROGRESS = _cproton.PN_INPROGRESS

def pn_code(*args):
  return _cproton.pn_code(*args)
pn_code = _cproton.pn_code

def pn_error():
  return _cproton.pn_error()
pn_error = _cproton.pn_error

def pn_error_free(*args):
  return _cproton.pn_error_free(*args)
pn_error_free = _cproton.pn_error_free

def pn_error_clear(*args):
  return _cproton.pn_error_clear(*args)
pn_error_clear = _cproton.pn_error_clear

def pn_error_set(*args):
  return _cproton.pn_error_set(*args)
pn_error_set = _cproton.pn_error_set

def pn_error_code(*args):
  return _cproton.pn_error_code(*args)
pn_error_code = _cproton.pn_error_code

def pn_error_text(*args):
  return _cproton.pn_error_text(*args)
pn_error_text = _cproton.pn_error_text

def pn_error_copy(*args):
  return _cproton.pn_error_copy(*args)
pn_error_copy = _cproton.pn_error_copy
PROTON_CONDITION_H = _cproton.PROTON_CONDITION_H

def pn_condition_is_set(*args):
  return _cproton.pn_condition_is_set(*args)
pn_condition_is_set = _cproton.pn_condition_is_set

def pn_condition_clear(*args):
  return _cproton.pn_condition_clear(*args)
pn_condition_clear = _cproton.pn_condition_clear

def pn_condition_get_name(*args):
  return _cproton.pn_condition_get_name(*args)
pn_condition_get_name = _cproton.pn_condition_get_name

def pn_condition_set_name(*args):
  return _cproton.pn_condition_set_name(*args)
pn_condition_set_name = _cproton.pn_condition_set_name

def pn_condition_get_description(*args):
  return _cproton.pn_condition_get_description(*args)
pn_condition_get_description = _cproton.pn_condition_get_description

def pn_condition_set_description(*args):
  return _cproton.pn_condition_set_description(*args)
pn_condition_set_description = _cproton.pn_condition_set_description

def pn_condition_info(*args):
  return _cproton.pn_condition_info(*args)
pn_condition_info = _cproton.pn_condition_info

def pn_condition_is_redirect(*args):
  return _cproton.pn_condition_is_redirect(*args)
pn_condition_is_redirect = _cproton.pn_condition_is_redirect

def pn_condition_redirect_host(*args):
  return _cproton.pn_condition_redirect_host(*args)
pn_condition_redirect_host = _cproton.pn_condition_redirect_host

def pn_condition_redirect_port(*args):
  return _cproton.pn_condition_redirect_port(*args)
pn_condition_redirect_port = _cproton.pn_condition_redirect_port
PROTON_CONNECTION_H = _cproton.PROTON_CONNECTION_H
PN_LOCAL_UNINIT = _cproton.PN_LOCAL_UNINIT
PN_LOCAL_ACTIVE = _cproton.PN_LOCAL_ACTIVE
PN_LOCAL_CLOSED = _cproton.PN_LOCAL_CLOSED
PN_REMOTE_UNINIT = _cproton.PN_REMOTE_UNINIT
PN_REMOTE_ACTIVE = _cproton.PN_REMOTE_ACTIVE
PN_REMOTE_CLOSED = _cproton.PN_REMOTE_CLOSED
PN_LOCAL_MASK = _cproton.PN_LOCAL_MASK
PN_REMOTE_MASK = _cproton.PN_REMOTE_MASK

def pn_connection():
  return _cproton.pn_connection()
pn_connection = _cproton.pn_connection

def pn_connection_free(*args):
  return _cproton.pn_connection_free(*args)
pn_connection_free = _cproton.pn_connection_free

def pn_connection_error(*args):
  return _cproton.pn_connection_error(*args)
pn_connection_error = _cproton.pn_connection_error

def pn_connection_collect(*args):
  return _cproton.pn_connection_collect(*args)
pn_connection_collect = _cproton.pn_connection_collect

def pn_connection_state(*args):
  return _cproton.pn_connection_state(*args)
pn_connection_state = _cproton.pn_connection_state

def pn_connection_open(*args):
  return _cproton.pn_connection_open(*args)
pn_connection_open = _cproton.pn_connection_open

def pn_connection_close(*args):
  return _cproton.pn_connection_close(*args)
pn_connection_close = _cproton.pn_connection_close

def pn_connection_reset(*args):
  return _cproton.pn_connection_reset(*args)
pn_connection_reset = _cproton.pn_connection_reset

def pn_connection_condition(*args):
  return _cproton.pn_connection_condition(*args)
pn_connection_condition = _cproton.pn_connection_condition

def pn_connection_remote_condition(*args):
  return _cproton.pn_connection_remote_condition(*args)
pn_connection_remote_condition = _cproton.pn_connection_remote_condition

def pn_connection_get_container(*args):
  return _cproton.pn_connection_get_container(*args)
pn_connection_get_container = _cproton.pn_connection_get_container

def pn_connection_set_container(*args):
  return _cproton.pn_connection_set_container(*args)
pn_connection_set_container = _cproton.pn_connection_set_container

def pn_connection_get_hostname(*args):
  return _cproton.pn_connection_get_hostname(*args)
pn_connection_get_hostname = _cproton.pn_connection_get_hostname

def pn_connection_set_hostname(*args):
  return _cproton.pn_connection_set_hostname(*args)
pn_connection_set_hostname = _cproton.pn_connection_set_hostname

def pn_connection_remote_container(*args):
  return _cproton.pn_connection_remote_container(*args)
pn_connection_remote_container = _cproton.pn_connection_remote_container

def pn_connection_remote_hostname(*args):
  return _cproton.pn_connection_remote_hostname(*args)
pn_connection_remote_hostname = _cproton.pn_connection_remote_hostname

def pn_connection_offered_capabilities(*args):
  return _cproton.pn_connection_offered_capabilities(*args)
pn_connection_offered_capabilities = _cproton.pn_connection_offered_capabilities

def pn_connection_desired_capabilities(*args):
  return _cproton.pn_connection_desired_capabilities(*args)
pn_connection_desired_capabilities = _cproton.pn_connection_desired_capabilities

def pn_connection_properties(*args):
  return _cproton.pn_connection_properties(*args)
pn_connection_properties = _cproton.pn_connection_properties

def pn_connection_remote_offered_capabilities(*args):
  return _cproton.pn_connection_remote_offered_capabilities(*args)
pn_connection_remote_offered_capabilities = _cproton.pn_connection_remote_offered_capabilities

def pn_connection_remote_desired_capabilities(*args):
  return _cproton.pn_connection_remote_desired_capabilities(*args)
pn_connection_remote_desired_capabilities = _cproton.pn_connection_remote_desired_capabilities

def pn_connection_remote_properties(*args):
  return _cproton.pn_connection_remote_properties(*args)
pn_connection_remote_properties = _cproton.pn_connection_remote_properties

def pn_connection_transport(*args):
  return _cproton.pn_connection_transport(*args)
pn_connection_transport = _cproton.pn_connection_transport
PROTON_SESSION_H = _cproton.PROTON_SESSION_H

def pn_session(*args):
  return _cproton.pn_session(*args)
pn_session = _cproton.pn_session

def pn_session_free(*args):
  return _cproton.pn_session_free(*args)
pn_session_free = _cproton.pn_session_free

def pn_session_state(*args):
  return _cproton.pn_session_state(*args)
pn_session_state = _cproton.pn_session_state

def pn_session_error(*args):
  return _cproton.pn_session_error(*args)
pn_session_error = _cproton.pn_session_error

def pn_session_condition(*args):
  return _cproton.pn_session_condition(*args)
pn_session_condition = _cproton.pn_session_condition

def pn_session_remote_condition(*args):
  return _cproton.pn_session_remote_condition(*args)
pn_session_remote_condition = _cproton.pn_session_remote_condition

def pn_session_connection(*args):
  return _cproton.pn_session_connection(*args)
pn_session_connection = _cproton.pn_session_connection

def pn_session_open(*args):
  return _cproton.pn_session_open(*args)
pn_session_open = _cproton.pn_session_open

def pn_session_close(*args):
  return _cproton.pn_session_close(*args)
pn_session_close = _cproton.pn_session_close

def pn_session_get_incoming_capacity(*args):
  return _cproton.pn_session_get_incoming_capacity(*args)
pn_session_get_incoming_capacity = _cproton.pn_session_get_incoming_capacity

def pn_session_set_incoming_capacity(*args):
  return _cproton.pn_session_set_incoming_capacity(*args)
pn_session_set_incoming_capacity = _cproton.pn_session_set_incoming_capacity

def pn_session_outgoing_bytes(*args):
  return _cproton.pn_session_outgoing_bytes(*args)
pn_session_outgoing_bytes = _cproton.pn_session_outgoing_bytes

def pn_session_incoming_bytes(*args):
  return _cproton.pn_session_incoming_bytes(*args)
pn_session_incoming_bytes = _cproton.pn_session_incoming_bytes

def pn_session_head(*args):
  return _cproton.pn_session_head(*args)
pn_session_head = _cproton.pn_session_head

def pn_session_next(*args):
  return _cproton.pn_session_next(*args)
pn_session_next = _cproton.pn_session_next
PROTON_LINK_H = _cproton.PROTON_LINK_H

def pn_sender(*args):
  return _cproton.pn_sender(*args)
pn_sender = _cproton.pn_sender

def pn_receiver(*args):
  return _cproton.pn_receiver(*args)
pn_receiver = _cproton.pn_receiver

def pn_link_free(*args):
  return _cproton.pn_link_free(*args)
pn_link_free = _cproton.pn_link_free

def pn_link_name(*args):
  return _cproton.pn_link_name(*args)
pn_link_name = _cproton.pn_link_name

def pn_link_is_sender(*args):
  return _cproton.pn_link_is_sender(*args)
pn_link_is_sender = _cproton.pn_link_is_sender

def pn_link_is_receiver(*args):
  return _cproton.pn_link_is_receiver(*args)
pn_link_is_receiver = _cproton.pn_link_is_receiver

def pn_link_state(*args):
  return _cproton.pn_link_state(*args)
pn_link_state = _cproton.pn_link_state

def pn_link_error(*args):
  return _cproton.pn_link_error(*args)
pn_link_error = _cproton.pn_link_error

def pn_link_condition(*args):
  return _cproton.pn_link_condition(*args)
pn_link_condition = _cproton.pn_link_condition

def pn_link_remote_condition(*args):
  return _cproton.pn_link_remote_condition(*args)
pn_link_remote_condition = _cproton.pn_link_remote_condition

def pn_link_session(*args):
  return _cproton.pn_link_session(*args)
pn_link_session = _cproton.pn_link_session

def pn_link_head(*args):
  return _cproton.pn_link_head(*args)
pn_link_head = _cproton.pn_link_head

def pn_link_next(*args):
  return _cproton.pn_link_next(*args)
pn_link_next = _cproton.pn_link_next

def pn_link_open(*args):
  return _cproton.pn_link_open(*args)
pn_link_open = _cproton.pn_link_open

def pn_link_close(*args):
  return _cproton.pn_link_close(*args)
pn_link_close = _cproton.pn_link_close

def pn_link_source(*args):
  return _cproton.pn_link_source(*args)
pn_link_source = _cproton.pn_link_source

def pn_link_target(*args):
  return _cproton.pn_link_target(*args)
pn_link_target = _cproton.pn_link_target

def pn_link_remote_source(*args):
  return _cproton.pn_link_remote_source(*args)
pn_link_remote_source = _cproton.pn_link_remote_source

def pn_link_remote_target(*args):
  return _cproton.pn_link_remote_target(*args)
pn_link_remote_target = _cproton.pn_link_remote_target

def pn_link_current(*args):
  return _cproton.pn_link_current(*args)
pn_link_current = _cproton.pn_link_current

def pn_link_advance(*args):
  return _cproton.pn_link_advance(*args)
pn_link_advance = _cproton.pn_link_advance

def pn_link_credit(*args):
  return _cproton.pn_link_credit(*args)
pn_link_credit = _cproton.pn_link_credit

def pn_link_queued(*args):
  return _cproton.pn_link_queued(*args)
pn_link_queued = _cproton.pn_link_queued

def pn_link_remote_credit(*args):
  return _cproton.pn_link_remote_credit(*args)
pn_link_remote_credit = _cproton.pn_link_remote_credit

def pn_link_get_drain(*args):
  return _cproton.pn_link_get_drain(*args)
pn_link_get_drain = _cproton.pn_link_get_drain

def pn_link_drained(*args):
  return _cproton.pn_link_drained(*args)
pn_link_drained = _cproton.pn_link_drained

def pn_link_available(*args):
  return _cproton.pn_link_available(*args)
pn_link_available = _cproton.pn_link_available
PN_SND_UNSETTLED = _cproton.PN_SND_UNSETTLED
PN_SND_SETTLED = _cproton.PN_SND_SETTLED
PN_SND_MIXED = _cproton.PN_SND_MIXED
PN_RCV_FIRST = _cproton.PN_RCV_FIRST
PN_RCV_SECOND = _cproton.PN_RCV_SECOND

def pn_link_snd_settle_mode(*args):
  return _cproton.pn_link_snd_settle_mode(*args)
pn_link_snd_settle_mode = _cproton.pn_link_snd_settle_mode

def pn_link_rcv_settle_mode(*args):
  return _cproton.pn_link_rcv_settle_mode(*args)
pn_link_rcv_settle_mode = _cproton.pn_link_rcv_settle_mode

def pn_link_set_snd_settle_mode(*args):
  return _cproton.pn_link_set_snd_settle_mode(*args)
pn_link_set_snd_settle_mode = _cproton.pn_link_set_snd_settle_mode

def pn_link_set_rcv_settle_mode(*args):
  return _cproton.pn_link_set_rcv_settle_mode(*args)
pn_link_set_rcv_settle_mode = _cproton.pn_link_set_rcv_settle_mode

def pn_link_remote_snd_settle_mode(*args):
  return _cproton.pn_link_remote_snd_settle_mode(*args)
pn_link_remote_snd_settle_mode = _cproton.pn_link_remote_snd_settle_mode

def pn_link_remote_rcv_settle_mode(*args):
  return _cproton.pn_link_remote_rcv_settle_mode(*args)
pn_link_remote_rcv_settle_mode = _cproton.pn_link_remote_rcv_settle_mode

def pn_link_unsettled(*args):
  return _cproton.pn_link_unsettled(*args)
pn_link_unsettled = _cproton.pn_link_unsettled

def pn_unsettled_head(*args):
  return _cproton.pn_unsettled_head(*args)
pn_unsettled_head = _cproton.pn_unsettled_head

def pn_unsettled_next(*args):
  return _cproton.pn_unsettled_next(*args)
pn_unsettled_next = _cproton.pn_unsettled_next

def pn_link_offered(*args):
  return _cproton.pn_link_offered(*args)
pn_link_offered = _cproton.pn_link_offered

def pn_link_flow(*args):
  return _cproton.pn_link_flow(*args)
pn_link_flow = _cproton.pn_link_flow

def pn_link_drain(*args):
  return _cproton.pn_link_drain(*args)
pn_link_drain = _cproton.pn_link_drain

def pn_link_set_drain(*args):
  return _cproton.pn_link_set_drain(*args)
pn_link_set_drain = _cproton.pn_link_set_drain

def pn_link_draining(*args):
  return _cproton.pn_link_draining(*args)
pn_link_draining = _cproton.pn_link_draining
PROTON_TERMINUS_H = _cproton.PROTON_TERMINUS_H
PN_UNSPECIFIED = _cproton.PN_UNSPECIFIED
PN_SOURCE = _cproton.PN_SOURCE
PN_TARGET = _cproton.PN_TARGET
PN_COORDINATOR = _cproton.PN_COORDINATOR
PN_NONDURABLE = _cproton.PN_NONDURABLE
PN_CONFIGURATION = _cproton.PN_CONFIGURATION
PN_DELIVERIES = _cproton.PN_DELIVERIES
PN_LINK_CLOSE = _cproton.PN_LINK_CLOSE
PN_SESSION_CLOSE = _cproton.PN_SESSION_CLOSE
PN_CONNECTION_CLOSE = _cproton.PN_CONNECTION_CLOSE
PN_NEVER = _cproton.PN_NEVER
PN_DIST_MODE_UNSPECIFIED = _cproton.PN_DIST_MODE_UNSPECIFIED
PN_DIST_MODE_COPY = _cproton.PN_DIST_MODE_COPY
PN_DIST_MODE_MOVE = _cproton.PN_DIST_MODE_MOVE

def pn_terminus_get_type(*args):
  return _cproton.pn_terminus_get_type(*args)
pn_terminus_get_type = _cproton.pn_terminus_get_type

def pn_terminus_set_type(*args):
  return _cproton.pn_terminus_set_type(*args)
pn_terminus_set_type = _cproton.pn_terminus_set_type

def pn_terminus_get_address(*args):
  return _cproton.pn_terminus_get_address(*args)
pn_terminus_get_address = _cproton.pn_terminus_get_address

def pn_terminus_set_address(*args):
  return _cproton.pn_terminus_set_address(*args)
pn_terminus_set_address = _cproton.pn_terminus_set_address

def pn_terminus_get_distribution_mode(*args):
  return _cproton.pn_terminus_get_distribution_mode(*args)
pn_terminus_get_distribution_mode = _cproton.pn_terminus_get_distribution_mode

def pn_terminus_set_distribution_mode(*args):
  return _cproton.pn_terminus_set_distribution_mode(*args)
pn_terminus_set_distribution_mode = _cproton.pn_terminus_set_distribution_mode

def pn_terminus_get_durability(*args):
  return _cproton.pn_terminus_get_durability(*args)
pn_terminus_get_durability = _cproton.pn_terminus_get_durability

def pn_terminus_set_durability(*args):
  return _cproton.pn_terminus_set_durability(*args)
pn_terminus_set_durability = _cproton.pn_terminus_set_durability

def pn_terminus_get_expiry_policy(*args):
  return _cproton.pn_terminus_get_expiry_policy(*args)
pn_terminus_get_expiry_policy = _cproton.pn_terminus_get_expiry_policy

def pn_terminus_set_expiry_policy(*args):
  return _cproton.pn_terminus_set_expiry_policy(*args)
pn_terminus_set_expiry_policy = _cproton.pn_terminus_set_expiry_policy

def pn_terminus_get_timeout(*args):
  return _cproton.pn_terminus_get_timeout(*args)
pn_terminus_get_timeout = _cproton.pn_terminus_get_timeout

def pn_terminus_set_timeout(*args):
  return _cproton.pn_terminus_set_timeout(*args)
pn_terminus_set_timeout = _cproton.pn_terminus_set_timeout

def pn_terminus_is_dynamic(*args):
  return _cproton.pn_terminus_is_dynamic(*args)
pn_terminus_is_dynamic = _cproton.pn_terminus_is_dynamic

def pn_terminus_set_dynamic(*args):
  return _cproton.pn_terminus_set_dynamic(*args)
pn_terminus_set_dynamic = _cproton.pn_terminus_set_dynamic

def pn_terminus_properties(*args):
  return _cproton.pn_terminus_properties(*args)
pn_terminus_properties = _cproton.pn_terminus_properties

def pn_terminus_capabilities(*args):
  return _cproton.pn_terminus_capabilities(*args)
pn_terminus_capabilities = _cproton.pn_terminus_capabilities

def pn_terminus_outcomes(*args):
  return _cproton.pn_terminus_outcomes(*args)
pn_terminus_outcomes = _cproton.pn_terminus_outcomes

def pn_terminus_filter(*args):
  return _cproton.pn_terminus_filter(*args)
pn_terminus_filter = _cproton.pn_terminus_filter

def pn_terminus_copy(*args):
  return _cproton.pn_terminus_copy(*args)
pn_terminus_copy = _cproton.pn_terminus_copy
PROTON_DELIVERY_H = _cproton.PROTON_DELIVERY_H
class pn_delivery_tag_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pn_delivery_tag_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pn_delivery_tag_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _cproton.pn_delivery_tag_t_size_set
    __swig_getmethods__["size"] = _cproton.pn_delivery_tag_t_size_get
    if _newclass:size = _swig_property(_cproton.pn_delivery_tag_t_size_get, _cproton.pn_delivery_tag_t_size_set)
    __swig_setmethods__["bytes"] = _cproton.pn_delivery_tag_t_bytes_set
    __swig_getmethods__["bytes"] = _cproton.pn_delivery_tag_t_bytes_get
    if _newclass:bytes = _swig_property(_cproton.pn_delivery_tag_t_bytes_get, _cproton.pn_delivery_tag_t_bytes_set)
    def __init__(self): 
        this = _cproton.new_pn_delivery_tag_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cproton.delete_pn_delivery_tag_t
    __del__ = lambda self : None;
pn_delivery_tag_t_swigregister = _cproton.pn_delivery_tag_t_swigregister
pn_delivery_tag_t_swigregister(pn_delivery_tag_t)


def pn_delivery_link(*args):
  return _cproton.pn_delivery_link(*args)
pn_delivery_link = _cproton.pn_delivery_link

def pn_delivery_local(*args):
  return _cproton.pn_delivery_local(*args)
pn_delivery_local = _cproton.pn_delivery_local

def pn_delivery_local_state(*args):
  return _cproton.pn_delivery_local_state(*args)
pn_delivery_local_state = _cproton.pn_delivery_local_state

def pn_delivery_remote(*args):
  return _cproton.pn_delivery_remote(*args)
pn_delivery_remote = _cproton.pn_delivery_remote

def pn_delivery_remote_state(*args):
  return _cproton.pn_delivery_remote_state(*args)
pn_delivery_remote_state = _cproton.pn_delivery_remote_state

def pn_delivery_settled(*args):
  return _cproton.pn_delivery_settled(*args)
pn_delivery_settled = _cproton.pn_delivery_settled

def pn_delivery_pending(*args):
  return _cproton.pn_delivery_pending(*args)
pn_delivery_pending = _cproton.pn_delivery_pending

def pn_delivery_partial(*args):
  return _cproton.pn_delivery_partial(*args)
pn_delivery_partial = _cproton.pn_delivery_partial

def pn_delivery_writable(*args):
  return _cproton.pn_delivery_writable(*args)
pn_delivery_writable = _cproton.pn_delivery_writable

def pn_delivery_readable(*args):
  return _cproton.pn_delivery_readable(*args)
pn_delivery_readable = _cproton.pn_delivery_readable

def pn_delivery_updated(*args):
  return _cproton.pn_delivery_updated(*args)
pn_delivery_updated = _cproton.pn_delivery_updated

def pn_delivery_update(*args):
  return _cproton.pn_delivery_update(*args)
pn_delivery_update = _cproton.pn_delivery_update

def pn_delivery_clear(*args):
  return _cproton.pn_delivery_clear(*args)
pn_delivery_clear = _cproton.pn_delivery_clear

def pn_delivery_settle(*args):
  return _cproton.pn_delivery_settle(*args)
pn_delivery_settle = _cproton.pn_delivery_settle

def pn_delivery_dump(*args):
  return _cproton.pn_delivery_dump(*args)
pn_delivery_dump = _cproton.pn_delivery_dump

def pn_delivery_buffered(*args):
  return _cproton.pn_delivery_buffered(*args)
pn_delivery_buffered = _cproton.pn_delivery_buffered

def pn_work_head(*args):
  return _cproton.pn_work_head(*args)
pn_work_head = _cproton.pn_work_head

def pn_work_next(*args):
  return _cproton.pn_work_next(*args)
pn_work_next = _cproton.pn_work_next
PROTON_DISPOSITION_H = _cproton.PROTON_DISPOSITION_H
PN_RECEIVED = _cproton.PN_RECEIVED
PN_ACCEPTED = _cproton.PN_ACCEPTED
PN_REJECTED = _cproton.PN_REJECTED
PN_RELEASED = _cproton.PN_RELEASED
PN_MODIFIED = _cproton.PN_MODIFIED

def pn_disposition_type(*args):
  return _cproton.pn_disposition_type(*args)
pn_disposition_type = _cproton.pn_disposition_type

def pn_disposition_condition(*args):
  return _cproton.pn_disposition_condition(*args)
pn_disposition_condition = _cproton.pn_disposition_condition

def pn_disposition_data(*args):
  return _cproton.pn_disposition_data(*args)
pn_disposition_data = _cproton.pn_disposition_data

def pn_disposition_get_section_number(*args):
  return _cproton.pn_disposition_get_section_number(*args)
pn_disposition_get_section_number = _cproton.pn_disposition_get_section_number

def pn_disposition_set_section_number(*args):
  return _cproton.pn_disposition_set_section_number(*args)
pn_disposition_set_section_number = _cproton.pn_disposition_set_section_number

def pn_disposition_get_section_offset(*args):
  return _cproton.pn_disposition_get_section_offset(*args)
pn_disposition_get_section_offset = _cproton.pn_disposition_get_section_offset

def pn_disposition_set_section_offset(*args):
  return _cproton.pn_disposition_set_section_offset(*args)
pn_disposition_set_section_offset = _cproton.pn_disposition_set_section_offset

def pn_disposition_is_failed(*args):
  return _cproton.pn_disposition_is_failed(*args)
pn_disposition_is_failed = _cproton.pn_disposition_is_failed

def pn_disposition_set_failed(*args):
  return _cproton.pn_disposition_set_failed(*args)
pn_disposition_set_failed = _cproton.pn_disposition_set_failed

def pn_disposition_is_undeliverable(*args):
  return _cproton.pn_disposition_is_undeliverable(*args)
pn_disposition_is_undeliverable = _cproton.pn_disposition_is_undeliverable

def pn_disposition_set_undeliverable(*args):
  return _cproton.pn_disposition_set_undeliverable(*args)
pn_disposition_set_undeliverable = _cproton.pn_disposition_set_undeliverable

def pn_disposition_annotations(*args):
  return _cproton.pn_disposition_annotations(*args)
pn_disposition_annotations = _cproton.pn_disposition_annotations
PROTON_TRANSPORT_H = _cproton.PROTON_TRANSPORT_H
PN_TRACE_OFF = _cproton.PN_TRACE_OFF
PN_TRACE_RAW = _cproton.PN_TRACE_RAW
PN_TRACE_FRM = _cproton.PN_TRACE_FRM
PN_TRACE_DRV = _cproton.PN_TRACE_DRV

def pn_transport():
  return _cproton.pn_transport()
pn_transport = _cproton.pn_transport

def pn_transport_free(*args):
  return _cproton.pn_transport_free(*args)
pn_transport_free = _cproton.pn_transport_free

def pn_transport_error(*args):
  return _cproton.pn_transport_error(*args)
pn_transport_error = _cproton.pn_transport_error

def pn_transport_bind(*args):
  return _cproton.pn_transport_bind(*args)
pn_transport_bind = _cproton.pn_transport_bind

def pn_transport_unbind(*args):
  return _cproton.pn_transport_unbind(*args)
pn_transport_unbind = _cproton.pn_transport_unbind

def pn_transport_trace(*args):
  return _cproton.pn_transport_trace(*args)
pn_transport_trace = _cproton.pn_transport_trace

def pn_transport_set_tracer(*args):
  return _cproton.pn_transport_set_tracer(*args)
pn_transport_set_tracer = _cproton.pn_transport_set_tracer

def pn_transport_get_tracer(*args):
  return _cproton.pn_transport_get_tracer(*args)
pn_transport_get_tracer = _cproton.pn_transport_get_tracer

def pn_transport_get_context(*args):
  return _cproton.pn_transport_get_context(*args)
pn_transport_get_context = _cproton.pn_transport_get_context

def pn_transport_set_context(*args):
  return _cproton.pn_transport_set_context(*args)
pn_transport_set_context = _cproton.pn_transport_set_context

def pn_transport_log(*args):
  return _cproton.pn_transport_log(*args)
pn_transport_log = _cproton.pn_transport_log

def pn_transport_logf(*args):
  return _cproton.pn_transport_logf(*args)
pn_transport_logf = _cproton.pn_transport_logf

def pn_transport_get_channel_max(*args):
  return _cproton.pn_transport_get_channel_max(*args)
pn_transport_get_channel_max = _cproton.pn_transport_get_channel_max

def pn_transport_set_channel_max(*args):
  return _cproton.pn_transport_set_channel_max(*args)
pn_transport_set_channel_max = _cproton.pn_transport_set_channel_max

def pn_transport_remote_channel_max(*args):
  return _cproton.pn_transport_remote_channel_max(*args)
pn_transport_remote_channel_max = _cproton.pn_transport_remote_channel_max

def pn_transport_get_max_frame(*args):
  return _cproton.pn_transport_get_max_frame(*args)
pn_transport_get_max_frame = _cproton.pn_transport_get_max_frame

def pn_transport_set_max_frame(*args):
  return _cproton.pn_transport_set_max_frame(*args)
pn_transport_set_max_frame = _cproton.pn_transport_set_max_frame

def pn_transport_get_remote_max_frame(*args):
  return _cproton.pn_transport_get_remote_max_frame(*args)
pn_transport_get_remote_max_frame = _cproton.pn_transport_get_remote_max_frame

def pn_transport_get_idle_timeout(*args):
  return _cproton.pn_transport_get_idle_timeout(*args)
pn_transport_get_idle_timeout = _cproton.pn_transport_get_idle_timeout

def pn_transport_set_idle_timeout(*args):
  return _cproton.pn_transport_set_idle_timeout(*args)
pn_transport_set_idle_timeout = _cproton.pn_transport_set_idle_timeout

def pn_transport_get_remote_idle_timeout(*args):
  return _cproton.pn_transport_get_remote_idle_timeout(*args)
pn_transport_get_remote_idle_timeout = _cproton.pn_transport_get_remote_idle_timeout

def pn_transport_capacity(*args):
  return _cproton.pn_transport_capacity(*args)
pn_transport_capacity = _cproton.pn_transport_capacity

def pn_transport_tail(*args):
  return _cproton.pn_transport_tail(*args)
pn_transport_tail = _cproton.pn_transport_tail

def pn_transport_process(*args):
  return _cproton.pn_transport_process(*args)
pn_transport_process = _cproton.pn_transport_process

def pn_transport_close_tail(*args):
  return _cproton.pn_transport_close_tail(*args)
pn_transport_close_tail = _cproton.pn_transport_close_tail

def pn_transport_pending(*args):
  return _cproton.pn_transport_pending(*args)
pn_transport_pending = _cproton.pn_transport_pending

def pn_transport_head(*args):
  return _cproton.pn_transport_head(*args)
pn_transport_head = _cproton.pn_transport_head

def pn_transport_pop(*args):
  return _cproton.pn_transport_pop(*args)
pn_transport_pop = _cproton.pn_transport_pop

def pn_transport_close_head(*args):
  return _cproton.pn_transport_close_head(*args)
pn_transport_close_head = _cproton.pn_transport_close_head

def pn_transport_quiesced(*args):
  return _cproton.pn_transport_quiesced(*args)
pn_transport_quiesced = _cproton.pn_transport_quiesced

def pn_transport_closed(*args):
  return _cproton.pn_transport_closed(*args)
pn_transport_closed = _cproton.pn_transport_closed

def pn_transport_tick(*args):
  return _cproton.pn_transport_tick(*args)
pn_transport_tick = _cproton.pn_transport_tick

def pn_transport_get_frames_output(*args):
  return _cproton.pn_transport_get_frames_output(*args)
pn_transport_get_frames_output = _cproton.pn_transport_get_frames_output

def pn_transport_get_frames_input(*args):
  return _cproton.pn_transport_get_frames_input(*args)
pn_transport_get_frames_input = _cproton.pn_transport_get_frames_input
PROTON_EVENT_H = _cproton.PROTON_EVENT_H
PN_EVENT_CATEGORY_NONE = _cproton.PN_EVENT_CATEGORY_NONE
PN_EVENT_CATEGORY_PROTOCOL = _cproton.PN_EVENT_CATEGORY_PROTOCOL
PN_EVENT_CATEGORY_COUNT = _cproton.PN_EVENT_CATEGORY_COUNT
PN_EVENT_NONE = _cproton.PN_EVENT_NONE
PN_CONNECTION_REMOTE_STATE = _cproton.PN_CONNECTION_REMOTE_STATE
PN_CONNECTION_LOCAL_STATE = _cproton.PN_CONNECTION_LOCAL_STATE
PN_SESSION_REMOTE_STATE = _cproton.PN_SESSION_REMOTE_STATE
PN_SESSION_LOCAL_STATE = _cproton.PN_SESSION_LOCAL_STATE
PN_LINK_REMOTE_STATE = _cproton.PN_LINK_REMOTE_STATE
PN_LINK_LOCAL_STATE = _cproton.PN_LINK_LOCAL_STATE
PN_LINK_FLOW = _cproton.PN_LINK_FLOW
PN_DELIVERY = _cproton.PN_DELIVERY
PN_TRANSPORT = _cproton.PN_TRANSPORT

def pn_event_type_name(*args):
  return _cproton.pn_event_type_name(*args)
pn_event_type_name = _cproton.pn_event_type_name

def pn_collector():
  return _cproton.pn_collector()
pn_collector = _cproton.pn_collector

def pn_collector_free(*args):
  return _cproton.pn_collector_free(*args)
pn_collector_free = _cproton.pn_collector_free

def pn_collector_peek(*args):
  return _cproton.pn_collector_peek(*args)
pn_collector_peek = _cproton.pn_collector_peek

def pn_collector_pop(*args):
  return _cproton.pn_collector_pop(*args)
pn_collector_pop = _cproton.pn_collector_pop

def pn_event_type(*args):
  return _cproton.pn_event_type(*args)
pn_event_type = _cproton.pn_event_type

def pn_event_category(*args):
  return _cproton.pn_event_category(*args)
pn_event_category = _cproton.pn_event_category

def pn_event_connection(*args):
  return _cproton.pn_event_connection(*args)
pn_event_connection = _cproton.pn_event_connection

def pn_event_session(*args):
  return _cproton.pn_event_session(*args)
pn_event_session = _cproton.pn_event_session

def pn_event_link(*args):
  return _cproton.pn_event_link(*args)
pn_event_link = _cproton.pn_event_link

def pn_event_delivery(*args):
  return _cproton.pn_event_delivery(*args)
pn_event_delivery = _cproton.pn_event_delivery

def pn_event_transport(*args):
  return _cproton.pn_event_transport(*args)
pn_event_transport = _cproton.pn_event_transport
PROTON_MESSAGE_H = _cproton.PROTON_MESSAGE_H
PN_DATA = _cproton.PN_DATA
PN_TEXT = _cproton.PN_TEXT
PN_AMQP = _cproton.PN_AMQP
PN_JSON = _cproton.PN_JSON
PN_DEFAULT_PRIORITY = _cproton.PN_DEFAULT_PRIORITY

def pn_message():
  return _cproton.pn_message()
pn_message = _cproton.pn_message

def pn_message_free(*args):
  return _cproton.pn_message_free(*args)
pn_message_free = _cproton.pn_message_free

def pn_message_clear(*args):
  return _cproton.pn_message_clear(*args)
pn_message_clear = _cproton.pn_message_clear

def pn_message_errno(*args):
  return _cproton.pn_message_errno(*args)
pn_message_errno = _cproton.pn_message_errno

def pn_message_error(*args):
  return _cproton.pn_message_error(*args)
pn_message_error = _cproton.pn_message_error

def pn_message_is_inferred(*args):
  return _cproton.pn_message_is_inferred(*args)
pn_message_is_inferred = _cproton.pn_message_is_inferred

def pn_message_set_inferred(*args):
  return _cproton.pn_message_set_inferred(*args)
pn_message_set_inferred = _cproton.pn_message_set_inferred

def pn_message_is_durable(*args):
  return _cproton.pn_message_is_durable(*args)
pn_message_is_durable = _cproton.pn_message_is_durable

def pn_message_set_durable(*args):
  return _cproton.pn_message_set_durable(*args)
pn_message_set_durable = _cproton.pn_message_set_durable

def pn_message_get_priority(*args):
  return _cproton.pn_message_get_priority(*args)
pn_message_get_priority = _cproton.pn_message_get_priority

def pn_message_set_priority(*args):
  return _cproton.pn_message_set_priority(*args)
pn_message_set_priority = _cproton.pn_message_set_priority

def pn_message_get_ttl(*args):
  return _cproton.pn_message_get_ttl(*args)
pn_message_get_ttl = _cproton.pn_message_get_ttl

def pn_message_set_ttl(*args):
  return _cproton.pn_message_set_ttl(*args)
pn_message_set_ttl = _cproton.pn_message_set_ttl

def pn_message_is_first_acquirer(*args):
  return _cproton.pn_message_is_first_acquirer(*args)
pn_message_is_first_acquirer = _cproton.pn_message_is_first_acquirer

def pn_message_set_first_acquirer(*args):
  return _cproton.pn_message_set_first_acquirer(*args)
pn_message_set_first_acquirer = _cproton.pn_message_set_first_acquirer

def pn_message_get_delivery_count(*args):
  return _cproton.pn_message_get_delivery_count(*args)
pn_message_get_delivery_count = _cproton.pn_message_get_delivery_count

def pn_message_set_delivery_count(*args):
  return _cproton.pn_message_set_delivery_count(*args)
pn_message_set_delivery_count = _cproton.pn_message_set_delivery_count

def pn_message_id(*args):
  return _cproton.pn_message_id(*args)
pn_message_id = _cproton.pn_message_id

def pn_message_get_id(*args):
  return _cproton.pn_message_get_id(*args)
pn_message_get_id = _cproton.pn_message_get_id

def pn_message_set_id(*args):
  return _cproton.pn_message_set_id(*args)
pn_message_set_id = _cproton.pn_message_set_id

def pn_message_get_user_id(*args):
  return _cproton.pn_message_get_user_id(*args)
pn_message_get_user_id = _cproton.pn_message_get_user_id

def pn_message_set_user_id(*args):
  return _cproton.pn_message_set_user_id(*args)
pn_message_set_user_id = _cproton.pn_message_set_user_id

def pn_message_get_address(*args):
  return _cproton.pn_message_get_address(*args)
pn_message_get_address = _cproton.pn_message_get_address

def pn_message_set_address(*args):
  return _cproton.pn_message_set_address(*args)
pn_message_set_address = _cproton.pn_message_set_address

def pn_message_get_subject(*args):
  return _cproton.pn_message_get_subject(*args)
pn_message_get_subject = _cproton.pn_message_get_subject

def pn_message_set_subject(*args):
  return _cproton.pn_message_set_subject(*args)
pn_message_set_subject = _cproton.pn_message_set_subject

def pn_message_get_reply_to(*args):
  return _cproton.pn_message_get_reply_to(*args)
pn_message_get_reply_to = _cproton.pn_message_get_reply_to

def pn_message_set_reply_to(*args):
  return _cproton.pn_message_set_reply_to(*args)
pn_message_set_reply_to = _cproton.pn_message_set_reply_to

def pn_message_correlation_id(*args):
  return _cproton.pn_message_correlation_id(*args)
pn_message_correlation_id = _cproton.pn_message_correlation_id

def pn_message_get_correlation_id(*args):
  return _cproton.pn_message_get_correlation_id(*args)
pn_message_get_correlation_id = _cproton.pn_message_get_correlation_id

def pn_message_set_correlation_id(*args):
  return _cproton.pn_message_set_correlation_id(*args)
pn_message_set_correlation_id = _cproton.pn_message_set_correlation_id

def pn_message_get_content_type(*args):
  return _cproton.pn_message_get_content_type(*args)
pn_message_get_content_type = _cproton.pn_message_get_content_type

def pn_message_set_content_type(*args):
  return _cproton.pn_message_set_content_type(*args)
pn_message_set_content_type = _cproton.pn_message_set_content_type

def pn_message_get_content_encoding(*args):
  return _cproton.pn_message_get_content_encoding(*args)
pn_message_get_content_encoding = _cproton.pn_message_get_content_encoding

def pn_message_set_content_encoding(*args):
  return _cproton.pn_message_set_content_encoding(*args)
pn_message_set_content_encoding = _cproton.pn_message_set_content_encoding

def pn_message_get_expiry_time(*args):
  return _cproton.pn_message_get_expiry_time(*args)
pn_message_get_expiry_time = _cproton.pn_message_get_expiry_time

def pn_message_set_expiry_time(*args):
  return _cproton.pn_message_set_expiry_time(*args)
pn_message_set_expiry_time = _cproton.pn_message_set_expiry_time

def pn_message_get_creation_time(*args):
  return _cproton.pn_message_get_creation_time(*args)
pn_message_get_creation_time = _cproton.pn_message_get_creation_time

def pn_message_set_creation_time(*args):
  return _cproton.pn_message_set_creation_time(*args)
pn_message_set_creation_time = _cproton.pn_message_set_creation_time

def pn_message_get_group_id(*args):
  return _cproton.pn_message_get_group_id(*args)
pn_message_get_group_id = _cproton.pn_message_get_group_id

def pn_message_set_group_id(*args):
  return _cproton.pn_message_set_group_id(*args)
pn_message_set_group_id = _cproton.pn_message_set_group_id

def pn_message_get_group_sequence(*args):
  return _cproton.pn_message_get_group_sequence(*args)
pn_message_get_group_sequence = _cproton.pn_message_get_group_sequence

def pn_message_set_group_sequence(*args):
  return _cproton.pn_message_set_group_sequence(*args)
pn_message_set_group_sequence = _cproton.pn_message_set_group_sequence

def pn_message_get_reply_to_group_id(*args):
  return _cproton.pn_message_get_reply_to_group_id(*args)
pn_message_get_reply_to_group_id = _cproton.pn_message_get_reply_to_group_id

def pn_message_set_reply_to_group_id(*args):
  return _cproton.pn_message_set_reply_to_group_id(*args)
pn_message_set_reply_to_group_id = _cproton.pn_message_set_reply_to_group_id

def pn_message_get_format(*args):
  return _cproton.pn_message_get_format(*args)
pn_message_get_format = _cproton.pn_message_get_format

def pn_message_set_format(*args):
  return _cproton.pn_message_set_format(*args)
pn_message_set_format = _cproton.pn_message_set_format

def pn_message_instructions(*args):
  return _cproton.pn_message_instructions(*args)
pn_message_instructions = _cproton.pn_message_instructions

def pn_message_annotations(*args):
  return _cproton.pn_message_annotations(*args)
pn_message_annotations = _cproton.pn_message_annotations

def pn_message_properties(*args):
  return _cproton.pn_message_properties(*args)
pn_message_properties = _cproton.pn_message_properties

def pn_message_body(*args):
  return _cproton.pn_message_body(*args)
pn_message_body = _cproton.pn_message_body

def pn_message_decode(*args):
  return _cproton.pn_message_decode(*args)
pn_message_decode = _cproton.pn_message_decode
PROTON_SASL_H = _cproton.PROTON_SASL_H
PN_SASL_NONE = _cproton.PN_SASL_NONE
PN_SASL_OK = _cproton.PN_SASL_OK
PN_SASL_AUTH = _cproton.PN_SASL_AUTH
PN_SASL_SYS = _cproton.PN_SASL_SYS
PN_SASL_PERM = _cproton.PN_SASL_PERM
PN_SASL_TEMP = _cproton.PN_SASL_TEMP
PN_SASL_CONF = _cproton.PN_SASL_CONF
PN_SASL_IDLE = _cproton.PN_SASL_IDLE
PN_SASL_STEP = _cproton.PN_SASL_STEP
PN_SASL_PASS = _cproton.PN_SASL_PASS
PN_SASL_FAIL = _cproton.PN_SASL_FAIL

def pn_sasl(*args):
  return _cproton.pn_sasl(*args)
pn_sasl = _cproton.pn_sasl

def pn_sasl_state(*args):
  return _cproton.pn_sasl_state(*args)
pn_sasl_state = _cproton.pn_sasl_state

def pn_sasl_mechanisms(*args):
  return _cproton.pn_sasl_mechanisms(*args)
pn_sasl_mechanisms = _cproton.pn_sasl_mechanisms

def pn_sasl_remote_mechanisms(*args):
  return _cproton.pn_sasl_remote_mechanisms(*args)
pn_sasl_remote_mechanisms = _cproton.pn_sasl_remote_mechanisms

def pn_sasl_client(*args):
  return _cproton.pn_sasl_client(*args)
pn_sasl_client = _cproton.pn_sasl_client

def pn_sasl_server(*args):
  return _cproton.pn_sasl_server(*args)
pn_sasl_server = _cproton.pn_sasl_server

def pn_sasl_plain(*args):
  return _cproton.pn_sasl_plain(*args)
pn_sasl_plain = _cproton.pn_sasl_plain

def pn_sasl_pending(*args):
  return _cproton.pn_sasl_pending(*args)
pn_sasl_pending = _cproton.pn_sasl_pending

def pn_sasl_send(*args):
  return _cproton.pn_sasl_send(*args)
pn_sasl_send = _cproton.pn_sasl_send

def pn_sasl_done(*args):
  return _cproton.pn_sasl_done(*args)
pn_sasl_done = _cproton.pn_sasl_done

def pn_sasl_outcome(*args):
  return _cproton.pn_sasl_outcome(*args)
pn_sasl_outcome = _cproton.pn_sasl_outcome
PROTON_DRIVER_H = _cproton.PROTON_DRIVER_H
PN_CONNECTOR_WRITABLE = _cproton.PN_CONNECTOR_WRITABLE
PN_CONNECTOR_READABLE = _cproton.PN_CONNECTOR_READABLE

def pn_driver():
  return _cproton.pn_driver()
pn_driver = _cproton.pn_driver

def pn_driver_errno(*args):
  return _cproton.pn_driver_errno(*args)
pn_driver_errno = _cproton.pn_driver_errno

def pn_driver_error(*args):
  return _cproton.pn_driver_error(*args)
pn_driver_error = _cproton.pn_driver_error

def pn_driver_trace(*args):
  return _cproton.pn_driver_trace(*args)
pn_driver_trace = _cproton.pn_driver_trace

def pn_driver_wakeup(*args):
  return _cproton.pn_driver_wakeup(*args)
pn_driver_wakeup = _cproton.pn_driver_wakeup

def pn_driver_wait(*args):
  return _cproton.pn_driver_wait(*args)
pn_driver_wait = _cproton.pn_driver_wait

def pn_driver_listener(*args):
  return _cproton.pn_driver_listener(*args)
pn_driver_listener = _cproton.pn_driver_listener

def pn_driver_connector(*args):
  return _cproton.pn_driver_connector(*args)
pn_driver_connector = _cproton.pn_driver_connector

def pn_driver_free(*args):
  return _cproton.pn_driver_free(*args)
pn_driver_free = _cproton.pn_driver_free

def pn_listener(*args):
  return _cproton.pn_listener(*args)
pn_listener = _cproton.pn_listener

def pn_listener_head(*args):
  return _cproton.pn_listener_head(*args)
pn_listener_head = _cproton.pn_listener_head

def pn_listener_next(*args):
  return _cproton.pn_listener_next(*args)
pn_listener_next = _cproton.pn_listener_next

def pn_listener_trace(*args):
  return _cproton.pn_listener_trace(*args)
pn_listener_trace = _cproton.pn_listener_trace

def pn_listener_accept(*args):
  return _cproton.pn_listener_accept(*args)
pn_listener_accept = _cproton.pn_listener_accept

def pn_listener_close(*args):
  return _cproton.pn_listener_close(*args)
pn_listener_close = _cproton.pn_listener_close

def pn_listener_free(*args):
  return _cproton.pn_listener_free(*args)
pn_listener_free = _cproton.pn_listener_free

def pn_connector(*args):
  return _cproton.pn_connector(*args)
pn_connector = _cproton.pn_connector

def pn_connector_head(*args):
  return _cproton.pn_connector_head(*args)
pn_connector_head = _cproton.pn_connector_head

def pn_connector_next(*args):
  return _cproton.pn_connector_next(*args)
pn_connector_next = _cproton.pn_connector_next

def pn_connector_trace(*args):
  return _cproton.pn_connector_trace(*args)
pn_connector_trace = _cproton.pn_connector_trace

def pn_connector_process(*args):
  return _cproton.pn_connector_process(*args)
pn_connector_process = _cproton.pn_connector_process

def pn_connector_listener(*args):
  return _cproton.pn_connector_listener(*args)
pn_connector_listener = _cproton.pn_connector_listener

def pn_connector_sasl(*args):
  return _cproton.pn_connector_sasl(*args)
pn_connector_sasl = _cproton.pn_connector_sasl

def pn_connector_connection(*args):
  return _cproton.pn_connector_connection(*args)
pn_connector_connection = _cproton.pn_connector_connection

def pn_connector_set_connection(*args):
  return _cproton.pn_connector_set_connection(*args)
pn_connector_set_connection = _cproton.pn_connector_set_connection

def pn_connector_name(*args):
  return _cproton.pn_connector_name(*args)
pn_connector_name = _cproton.pn_connector_name

def pn_connector_transport(*args):
  return _cproton.pn_connector_transport(*args)
pn_connector_transport = _cproton.pn_connector_transport

def pn_connector_close(*args):
  return _cproton.pn_connector_close(*args)
pn_connector_close = _cproton.pn_connector_close

def pn_connector_closed(*args):
  return _cproton.pn_connector_closed(*args)
pn_connector_closed = _cproton.pn_connector_closed

def pn_connector_free(*args):
  return _cproton.pn_connector_free(*args)
pn_connector_free = _cproton.pn_connector_free

def pn_connector_activate(*args):
  return _cproton.pn_connector_activate(*args)
pn_connector_activate = _cproton.pn_connector_activate

def pn_connector_activated(*args):
  return _cproton.pn_connector_activated(*args)
pn_connector_activated = _cproton.pn_connector_activated
PROTON_DRIVER_H_EXTRAS = _cproton.PROTON_DRIVER_H_EXTRAS

def pn_listener_fd(*args):
  return _cproton.pn_listener_fd(*args)
pn_listener_fd = _cproton.pn_listener_fd

def pn_listener_get_fd(*args):
  return _cproton.pn_listener_get_fd(*args)
pn_listener_get_fd = _cproton.pn_listener_get_fd

def pn_connector_fd(*args):
  return _cproton.pn_connector_fd(*args)
pn_connector_fd = _cproton.pn_connector_fd

def pn_connector_get_fd(*args):
  return _cproton.pn_connector_get_fd(*args)
pn_connector_get_fd = _cproton.pn_connector_get_fd
PROTON_MESSENGER_H = _cproton.PROTON_MESSENGER_H
PN_STATUS_UNKNOWN = _cproton.PN_STATUS_UNKNOWN
PN_STATUS_PENDING = _cproton.PN_STATUS_PENDING
PN_STATUS_ACCEPTED = _cproton.PN_STATUS_ACCEPTED
PN_STATUS_REJECTED = _cproton.PN_STATUS_REJECTED
PN_STATUS_RELEASED = _cproton.PN_STATUS_RELEASED
PN_STATUS_MODIFIED = _cproton.PN_STATUS_MODIFIED
PN_STATUS_ABORTED = _cproton.PN_STATUS_ABORTED
PN_STATUS_SETTLED = _cproton.PN_STATUS_SETTLED

def pn_messenger(*args):
  return _cproton.pn_messenger(*args)
pn_messenger = _cproton.pn_messenger

def pn_messenger_name(*args):
  return _cproton.pn_messenger_name(*args)
pn_messenger_name = _cproton.pn_messenger_name

def pn_messenger_set_certificate(*args):
  return _cproton.pn_messenger_set_certificate(*args)
pn_messenger_set_certificate = _cproton.pn_messenger_set_certificate

def pn_messenger_get_certificate(*args):
  return _cproton.pn_messenger_get_certificate(*args)
pn_messenger_get_certificate = _cproton.pn_messenger_get_certificate

def pn_messenger_set_private_key(*args):
  return _cproton.pn_messenger_set_private_key(*args)
pn_messenger_set_private_key = _cproton.pn_messenger_set_private_key

def pn_messenger_get_private_key(*args):
  return _cproton.pn_messenger_get_private_key(*args)
pn_messenger_get_private_key = _cproton.pn_messenger_get_private_key

def pn_messenger_set_password(*args):
  return _cproton.pn_messenger_set_password(*args)
pn_messenger_set_password = _cproton.pn_messenger_set_password

def pn_messenger_get_password(*args):
  return _cproton.pn_messenger_get_password(*args)
pn_messenger_get_password = _cproton.pn_messenger_get_password

def pn_messenger_set_trusted_certificates(*args):
  return _cproton.pn_messenger_set_trusted_certificates(*args)
pn_messenger_set_trusted_certificates = _cproton.pn_messenger_set_trusted_certificates

def pn_messenger_get_trusted_certificates(*args):
  return _cproton.pn_messenger_get_trusted_certificates(*args)
pn_messenger_get_trusted_certificates = _cproton.pn_messenger_get_trusted_certificates

def pn_messenger_set_timeout(*args):
  return _cproton.pn_messenger_set_timeout(*args)
pn_messenger_set_timeout = _cproton.pn_messenger_set_timeout

def pn_messenger_get_timeout(*args):
  return _cproton.pn_messenger_get_timeout(*args)
pn_messenger_get_timeout = _cproton.pn_messenger_get_timeout

def pn_messenger_is_blocking(*args):
  return _cproton.pn_messenger_is_blocking(*args)
pn_messenger_is_blocking = _cproton.pn_messenger_is_blocking

def pn_messenger_set_blocking(*args):
  return _cproton.pn_messenger_set_blocking(*args)
pn_messenger_set_blocking = _cproton.pn_messenger_set_blocking

def pn_messenger_is_passive(*args):
  return _cproton.pn_messenger_is_passive(*args)
pn_messenger_is_passive = _cproton.pn_messenger_is_passive

def pn_messenger_set_passive(*args):
  return _cproton.pn_messenger_set_passive(*args)
pn_messenger_set_passive = _cproton.pn_messenger_set_passive

def pn_messenger_free(*args):
  return _cproton.pn_messenger_free(*args)
pn_messenger_free = _cproton.pn_messenger_free

def pn_messenger_errno(*args):
  return _cproton.pn_messenger_errno(*args)
pn_messenger_errno = _cproton.pn_messenger_errno

def pn_messenger_error(*args):
  return _cproton.pn_messenger_error(*args)
pn_messenger_error = _cproton.pn_messenger_error

def pn_messenger_get_outgoing_window(*args):
  return _cproton.pn_messenger_get_outgoing_window(*args)
pn_messenger_get_outgoing_window = _cproton.pn_messenger_get_outgoing_window

def pn_messenger_set_outgoing_window(*args):
  return _cproton.pn_messenger_set_outgoing_window(*args)
pn_messenger_set_outgoing_window = _cproton.pn_messenger_set_outgoing_window

def pn_messenger_get_incoming_window(*args):
  return _cproton.pn_messenger_get_incoming_window(*args)
pn_messenger_get_incoming_window = _cproton.pn_messenger_get_incoming_window

def pn_messenger_set_incoming_window(*args):
  return _cproton.pn_messenger_set_incoming_window(*args)
pn_messenger_set_incoming_window = _cproton.pn_messenger_set_incoming_window

def pn_messenger_start(*args):
  return _cproton.pn_messenger_start(*args)
pn_messenger_start = _cproton.pn_messenger_start

def pn_messenger_stop(*args):
  return _cproton.pn_messenger_stop(*args)
pn_messenger_stop = _cproton.pn_messenger_stop

def pn_messenger_stopped(*args):
  return _cproton.pn_messenger_stopped(*args)
pn_messenger_stopped = _cproton.pn_messenger_stopped

def pn_messenger_subscribe(*args):
  return _cproton.pn_messenger_subscribe(*args)
pn_messenger_subscribe = _cproton.pn_messenger_subscribe

def pn_subscription_get_context(*args):
  return _cproton.pn_subscription_get_context(*args)
pn_subscription_get_context = _cproton.pn_subscription_get_context

def pn_subscription_set_context(*args):
  return _cproton.pn_subscription_set_context(*args)
pn_subscription_set_context = _cproton.pn_subscription_set_context

def pn_subscription_address(*args):
  return _cproton.pn_subscription_address(*args)
pn_subscription_address = _cproton.pn_subscription_address

def pn_messenger_put(*args):
  return _cproton.pn_messenger_put(*args)
pn_messenger_put = _cproton.pn_messenger_put

def pn_messenger_status(*args):
  return _cproton.pn_messenger_status(*args)
pn_messenger_status = _cproton.pn_messenger_status

def pn_messenger_buffered(*args):
  return _cproton.pn_messenger_buffered(*args)
pn_messenger_buffered = _cproton.pn_messenger_buffered

def pn_messenger_settle(*args):
  return _cproton.pn_messenger_settle(*args)
pn_messenger_settle = _cproton.pn_messenger_settle

def pn_messenger_outgoing_tracker(*args):
  return _cproton.pn_messenger_outgoing_tracker(*args)
pn_messenger_outgoing_tracker = _cproton.pn_messenger_outgoing_tracker

def pn_messenger_work(*args):
  return _cproton.pn_messenger_work(*args)
pn_messenger_work = _cproton.pn_messenger_work

def pn_messenger_interrupt(*args):
  return _cproton.pn_messenger_interrupt(*args)
pn_messenger_interrupt = _cproton.pn_messenger_interrupt

def pn_messenger_send(*args):
  return _cproton.pn_messenger_send(*args)
pn_messenger_send = _cproton.pn_messenger_send

def pn_messenger_recv(*args):
  return _cproton.pn_messenger_recv(*args)
pn_messenger_recv = _cproton.pn_messenger_recv

def pn_messenger_receiving(*args):
  return _cproton.pn_messenger_receiving(*args)
pn_messenger_receiving = _cproton.pn_messenger_receiving

def pn_messenger_get(*args):
  return _cproton.pn_messenger_get(*args)
pn_messenger_get = _cproton.pn_messenger_get

def pn_messenger_incoming_tracker(*args):
  return _cproton.pn_messenger_incoming_tracker(*args)
pn_messenger_incoming_tracker = _cproton.pn_messenger_incoming_tracker

def pn_messenger_incoming_subscription(*args):
  return _cproton.pn_messenger_incoming_subscription(*args)
pn_messenger_incoming_subscription = _cproton.pn_messenger_incoming_subscription
PN_CUMULATIVE = _cproton.PN_CUMULATIVE

def pn_messenger_accept(*args):
  return _cproton.pn_messenger_accept(*args)
pn_messenger_accept = _cproton.pn_messenger_accept

def pn_messenger_reject(*args):
  return _cproton.pn_messenger_reject(*args)
pn_messenger_reject = _cproton.pn_messenger_reject

def pn_messenger_outgoing(*args):
  return _cproton.pn_messenger_outgoing(*args)
pn_messenger_outgoing = _cproton.pn_messenger_outgoing

def pn_messenger_incoming(*args):
  return _cproton.pn_messenger_incoming(*args)
pn_messenger_incoming = _cproton.pn_messenger_incoming

def pn_messenger_route(*args):
  return _cproton.pn_messenger_route(*args)
pn_messenger_route = _cproton.pn_messenger_route

def pn_messenger_rewrite(*args):
  return _cproton.pn_messenger_rewrite(*args)
pn_messenger_rewrite = _cproton.pn_messenger_rewrite

def pn_messenger_selectable(*args):
  return _cproton.pn_messenger_selectable(*args)
pn_messenger_selectable = _cproton.pn_messenger_selectable

def pn_messenger_deadline(*args):
  return _cproton.pn_messenger_deadline(*args)
pn_messenger_deadline = _cproton.pn_messenger_deadline
PROTON_IO_H = _cproton.PROTON_IO_H
PN_INVALID_SOCKET = _cproton.PN_INVALID_SOCKET

def pn_io():
  return _cproton.pn_io()
pn_io = _cproton.pn_io

def pn_io_free(*args):
  return _cproton.pn_io_free(*args)
pn_io_free = _cproton.pn_io_free

def pn_io_error(*args):
  return _cproton.pn_io_error(*args)
pn_io_error = _cproton.pn_io_error

def pn_connect(*args):
  return _cproton.pn_connect(*args)
pn_connect = _cproton.pn_connect

def pn_listen(*args):
  return _cproton.pn_listen(*args)
pn_listen = _cproton.pn_listen

def pn_accept(*args):
  return _cproton.pn_accept(*args)
pn_accept = _cproton.pn_accept

def pn_close(*args):
  return _cproton.pn_close(*args)
pn_close = _cproton.pn_close

def pn_send(*args):
  return _cproton.pn_send(*args)
pn_send = _cproton.pn_send

def pn_recv(*args):
  return _cproton.pn_recv(*args)
pn_recv = _cproton.pn_recv

def pn_pipe(*args):
  return _cproton.pn_pipe(*args)
pn_pipe = _cproton.pn_pipe

def pn_read(*args):
  return _cproton.pn_read(*args)
pn_read = _cproton.pn_read

def pn_write(*args):
  return _cproton.pn_write(*args)
pn_write = _cproton.pn_write

def pn_wouldblock(*args):
  return _cproton.pn_wouldblock(*args)
pn_wouldblock = _cproton.pn_wouldblock
PROTON_SELECTABLE_H = _cproton.PROTON_SELECTABLE_H

def pn_selectables():
  return _cproton.pn_selectables()
pn_selectables = _cproton.pn_selectables

def pn_selectables_next(*args):
  return _cproton.pn_selectables_next(*args)
pn_selectables_next = _cproton.pn_selectables_next

def pn_selectables_free(*args):
  return _cproton.pn_selectables_free(*args)
pn_selectables_free = _cproton.pn_selectables_free

def pn_selectable_fd(*args):
  return _cproton.pn_selectable_fd(*args)
pn_selectable_fd = _cproton.pn_selectable_fd

def pn_selectable_capacity(*args):
  return _cproton.pn_selectable_capacity(*args)
pn_selectable_capacity = _cproton.pn_selectable_capacity

def pn_selectable_pending(*args):
  return _cproton.pn_selectable_pending(*args)
pn_selectable_pending = _cproton.pn_selectable_pending

def pn_selectable_deadline(*args):
  return _cproton.pn_selectable_deadline(*args)
pn_selectable_deadline = _cproton.pn_selectable_deadline

def pn_selectable_readable(*args):
  return _cproton.pn_selectable_readable(*args)
pn_selectable_readable = _cproton.pn_selectable_readable

def pn_selectable_writable(*args):
  return _cproton.pn_selectable_writable(*args)
pn_selectable_writable = _cproton.pn_selectable_writable

def pn_selectable_expired(*args):
  return _cproton.pn_selectable_expired(*args)
pn_selectable_expired = _cproton.pn_selectable_expired

def pn_selectable_is_registered(*args):
  return _cproton.pn_selectable_is_registered(*args)
pn_selectable_is_registered = _cproton.pn_selectable_is_registered

def pn_selectable_set_registered(*args):
  return _cproton.pn_selectable_set_registered(*args)
pn_selectable_set_registered = _cproton.pn_selectable_set_registered

def pn_selectable_is_terminal(*args):
  return _cproton.pn_selectable_is_terminal(*args)
pn_selectable_is_terminal = _cproton.pn_selectable_is_terminal

def pn_selectable_free(*args):
  return _cproton.pn_selectable_free(*args)
pn_selectable_free = _cproton.pn_selectable_free
PROTON_SSL_H = _cproton.PROTON_SSL_H
PN_SSL_MODE_CLIENT = _cproton.PN_SSL_MODE_CLIENT
PN_SSL_MODE_SERVER = _cproton.PN_SSL_MODE_SERVER
PN_SSL_RESUME_UNKNOWN = _cproton.PN_SSL_RESUME_UNKNOWN
PN_SSL_RESUME_NEW = _cproton.PN_SSL_RESUME_NEW
PN_SSL_RESUME_REUSED = _cproton.PN_SSL_RESUME_REUSED

def pn_ssl_domain(*args):
  return _cproton.pn_ssl_domain(*args)
pn_ssl_domain = _cproton.pn_ssl_domain

def pn_ssl_domain_free(*args):
  return _cproton.pn_ssl_domain_free(*args)
pn_ssl_domain_free = _cproton.pn_ssl_domain_free

def pn_ssl_domain_set_credentials(*args):
  return _cproton.pn_ssl_domain_set_credentials(*args)
pn_ssl_domain_set_credentials = _cproton.pn_ssl_domain_set_credentials

def pn_ssl_domain_set_trusted_ca_db(*args):
  return _cproton.pn_ssl_domain_set_trusted_ca_db(*args)
pn_ssl_domain_set_trusted_ca_db = _cproton.pn_ssl_domain_set_trusted_ca_db
PN_SSL_VERIFY_NULL = _cproton.PN_SSL_VERIFY_NULL
PN_SSL_VERIFY_PEER = _cproton.PN_SSL_VERIFY_PEER
PN_SSL_ANONYMOUS_PEER = _cproton.PN_SSL_ANONYMOUS_PEER
PN_SSL_VERIFY_PEER_NAME = _cproton.PN_SSL_VERIFY_PEER_NAME

def pn_ssl_domain_set_peer_authentication(*args):
  return _cproton.pn_ssl_domain_set_peer_authentication(*args)
pn_ssl_domain_set_peer_authentication = _cproton.pn_ssl_domain_set_peer_authentication

def pn_ssl_domain_allow_unsecured_client(*args):
  return _cproton.pn_ssl_domain_allow_unsecured_client(*args)
pn_ssl_domain_allow_unsecured_client = _cproton.pn_ssl_domain_allow_unsecured_client

def pn_ssl(*args):
  return _cproton.pn_ssl(*args)
pn_ssl = _cproton.pn_ssl

def pn_ssl_init(*args):
  return _cproton.pn_ssl_init(*args)
pn_ssl_init = _cproton.pn_ssl_init

def pn_ssl_resume_status(*args):
  return _cproton.pn_ssl_resume_status(*args)
pn_ssl_resume_status = _cproton.pn_ssl_resume_status

def pn_ssl_set_peer_hostname(*args):
  return _cproton.pn_ssl_set_peer_hostname(*args)
pn_ssl_set_peer_hostname = _cproton.pn_ssl_set_peer_hostname
PROTON_CODEC_H = _cproton.PROTON_CODEC_H
PN_NULL = _cproton.PN_NULL
PN_BOOL = _cproton.PN_BOOL
PN_UBYTE = _cproton.PN_UBYTE
PN_BYTE = _cproton.PN_BYTE
PN_USHORT = _cproton.PN_USHORT
PN_SHORT = _cproton.PN_SHORT
PN_UINT = _cproton.PN_UINT
PN_INT = _cproton.PN_INT
PN_CHAR = _cproton.PN_CHAR
PN_ULONG = _cproton.PN_ULONG
PN_LONG = _cproton.PN_LONG
PN_TIMESTAMP = _cproton.PN_TIMESTAMP
PN_FLOAT = _cproton.PN_FLOAT
PN_DOUBLE = _cproton.PN_DOUBLE
PN_DECIMAL32 = _cproton.PN_DECIMAL32
PN_DECIMAL64 = _cproton.PN_DECIMAL64
PN_DECIMAL128 = _cproton.PN_DECIMAL128
PN_UUID = _cproton.PN_UUID
PN_BINARY = _cproton.PN_BINARY
PN_STRING = _cproton.PN_STRING
PN_SYMBOL = _cproton.PN_SYMBOL
PN_DESCRIBED = _cproton.PN_DESCRIBED
PN_ARRAY = _cproton.PN_ARRAY
PN_LIST = _cproton.PN_LIST
PN_MAP = _cproton.PN_MAP

def pn_type_name(*args):
  return _cproton.pn_type_name(*args)
pn_type_name = _cproton.pn_type_name
class pn_atom_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pn_atom_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pn_atom_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _cproton.pn_atom_t_type_set
    __swig_getmethods__["type"] = _cproton.pn_atom_t_type_get
    if _newclass:type = _swig_property(_cproton.pn_atom_t_type_get, _cproton.pn_atom_t_type_set)
    __swig_getmethods__["u"] = _cproton.pn_atom_t_u_get
    if _newclass:u = _swig_property(_cproton.pn_atom_t_u_get)
    def __init__(self): 
        this = _cproton.new_pn_atom_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cproton.delete_pn_atom_t
    __del__ = lambda self : None;
pn_atom_t_swigregister = _cproton.pn_atom_t_swigregister
pn_atom_t_swigregister(pn_atom_t)

class pn_atom_t_u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pn_atom_t_u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pn_atom_t_u, name)
    __repr__ = _swig_repr
    __swig_setmethods__["as_bool"] = _cproton.pn_atom_t_u_as_bool_set
    __swig_getmethods__["as_bool"] = _cproton.pn_atom_t_u_as_bool_get
    if _newclass:as_bool = _swig_property(_cproton.pn_atom_t_u_as_bool_get, _cproton.pn_atom_t_u_as_bool_set)
    __swig_setmethods__["as_ubyte"] = _cproton.pn_atom_t_u_as_ubyte_set
    __swig_getmethods__["as_ubyte"] = _cproton.pn_atom_t_u_as_ubyte_get
    if _newclass:as_ubyte = _swig_property(_cproton.pn_atom_t_u_as_ubyte_get, _cproton.pn_atom_t_u_as_ubyte_set)
    __swig_setmethods__["as_byte"] = _cproton.pn_atom_t_u_as_byte_set
    __swig_getmethods__["as_byte"] = _cproton.pn_atom_t_u_as_byte_get
    if _newclass:as_byte = _swig_property(_cproton.pn_atom_t_u_as_byte_get, _cproton.pn_atom_t_u_as_byte_set)
    __swig_setmethods__["as_ushort"] = _cproton.pn_atom_t_u_as_ushort_set
    __swig_getmethods__["as_ushort"] = _cproton.pn_atom_t_u_as_ushort_get
    if _newclass:as_ushort = _swig_property(_cproton.pn_atom_t_u_as_ushort_get, _cproton.pn_atom_t_u_as_ushort_set)
    __swig_setmethods__["as_short"] = _cproton.pn_atom_t_u_as_short_set
    __swig_getmethods__["as_short"] = _cproton.pn_atom_t_u_as_short_get
    if _newclass:as_short = _swig_property(_cproton.pn_atom_t_u_as_short_get, _cproton.pn_atom_t_u_as_short_set)
    __swig_setmethods__["as_uint"] = _cproton.pn_atom_t_u_as_uint_set
    __swig_getmethods__["as_uint"] = _cproton.pn_atom_t_u_as_uint_get
    if _newclass:as_uint = _swig_property(_cproton.pn_atom_t_u_as_uint_get, _cproton.pn_atom_t_u_as_uint_set)
    __swig_setmethods__["as_int"] = _cproton.pn_atom_t_u_as_int_set
    __swig_getmethods__["as_int"] = _cproton.pn_atom_t_u_as_int_get
    if _newclass:as_int = _swig_property(_cproton.pn_atom_t_u_as_int_get, _cproton.pn_atom_t_u_as_int_set)
    __swig_setmethods__["as_char"] = _cproton.pn_atom_t_u_as_char_set
    __swig_getmethods__["as_char"] = _cproton.pn_atom_t_u_as_char_get
    if _newclass:as_char = _swig_property(_cproton.pn_atom_t_u_as_char_get, _cproton.pn_atom_t_u_as_char_set)
    __swig_setmethods__["as_ulong"] = _cproton.pn_atom_t_u_as_ulong_set
    __swig_getmethods__["as_ulong"] = _cproton.pn_atom_t_u_as_ulong_get
    if _newclass:as_ulong = _swig_property(_cproton.pn_atom_t_u_as_ulong_get, _cproton.pn_atom_t_u_as_ulong_set)
    __swig_setmethods__["as_long"] = _cproton.pn_atom_t_u_as_long_set
    __swig_getmethods__["as_long"] = _cproton.pn_atom_t_u_as_long_get
    if _newclass:as_long = _swig_property(_cproton.pn_atom_t_u_as_long_get, _cproton.pn_atom_t_u_as_long_set)
    __swig_setmethods__["as_timestamp"] = _cproton.pn_atom_t_u_as_timestamp_set
    __swig_getmethods__["as_timestamp"] = _cproton.pn_atom_t_u_as_timestamp_get
    if _newclass:as_timestamp = _swig_property(_cproton.pn_atom_t_u_as_timestamp_get, _cproton.pn_atom_t_u_as_timestamp_set)
    __swig_setmethods__["as_float"] = _cproton.pn_atom_t_u_as_float_set
    __swig_getmethods__["as_float"] = _cproton.pn_atom_t_u_as_float_get
    if _newclass:as_float = _swig_property(_cproton.pn_atom_t_u_as_float_get, _cproton.pn_atom_t_u_as_float_set)
    __swig_setmethods__["as_double"] = _cproton.pn_atom_t_u_as_double_set
    __swig_getmethods__["as_double"] = _cproton.pn_atom_t_u_as_double_get
    if _newclass:as_double = _swig_property(_cproton.pn_atom_t_u_as_double_get, _cproton.pn_atom_t_u_as_double_set)
    __swig_setmethods__["as_decimal32"] = _cproton.pn_atom_t_u_as_decimal32_set
    __swig_getmethods__["as_decimal32"] = _cproton.pn_atom_t_u_as_decimal32_get
    if _newclass:as_decimal32 = _swig_property(_cproton.pn_atom_t_u_as_decimal32_get, _cproton.pn_atom_t_u_as_decimal32_set)
    __swig_setmethods__["as_decimal64"] = _cproton.pn_atom_t_u_as_decimal64_set
    __swig_getmethods__["as_decimal64"] = _cproton.pn_atom_t_u_as_decimal64_get
    if _newclass:as_decimal64 = _swig_property(_cproton.pn_atom_t_u_as_decimal64_get, _cproton.pn_atom_t_u_as_decimal64_set)
    __swig_setmethods__["as_decimal128"] = _cproton.pn_atom_t_u_as_decimal128_set
    __swig_getmethods__["as_decimal128"] = _cproton.pn_atom_t_u_as_decimal128_get
    if _newclass:as_decimal128 = _swig_property(_cproton.pn_atom_t_u_as_decimal128_get, _cproton.pn_atom_t_u_as_decimal128_set)
    __swig_setmethods__["as_uuid"] = _cproton.pn_atom_t_u_as_uuid_set
    __swig_getmethods__["as_uuid"] = _cproton.pn_atom_t_u_as_uuid_get
    if _newclass:as_uuid = _swig_property(_cproton.pn_atom_t_u_as_uuid_get, _cproton.pn_atom_t_u_as_uuid_set)
    __swig_setmethods__["as_bytes"] = _cproton.pn_atom_t_u_as_bytes_set
    __swig_getmethods__["as_bytes"] = _cproton.pn_atom_t_u_as_bytes_get
    if _newclass:as_bytes = _swig_property(_cproton.pn_atom_t_u_as_bytes_get, _cproton.pn_atom_t_u_as_bytes_set)
    def __init__(self): 
        this = _cproton.new_pn_atom_t_u()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cproton.delete_pn_atom_t_u
    __del__ = lambda self : None;
pn_atom_t_u_swigregister = _cproton.pn_atom_t_u_swigregister
pn_atom_t_u_swigregister(pn_atom_t_u)


def pn_data(*args):
  return _cproton.pn_data(*args)
pn_data = _cproton.pn_data

def pn_data_free(*args):
  return _cproton.pn_data_free(*args)
pn_data_free = _cproton.pn_data_free

def pn_data_errno(*args):
  return _cproton.pn_data_errno(*args)
pn_data_errno = _cproton.pn_data_errno

def pn_data_error(*args):
  return _cproton.pn_data_error(*args)
pn_data_error = _cproton.pn_data_error

def pn_data_fill(*args):
  return _cproton.pn_data_fill(*args)
pn_data_fill = _cproton.pn_data_fill

def pn_data_scan(*args):
  return _cproton.pn_data_scan(*args)
pn_data_scan = _cproton.pn_data_scan

def pn_data_clear(*args):
  return _cproton.pn_data_clear(*args)
pn_data_clear = _cproton.pn_data_clear

def pn_data_size(*args):
  return _cproton.pn_data_size(*args)
pn_data_size = _cproton.pn_data_size

def pn_data_rewind(*args):
  return _cproton.pn_data_rewind(*args)
pn_data_rewind = _cproton.pn_data_rewind

def pn_data_next(*args):
  return _cproton.pn_data_next(*args)
pn_data_next = _cproton.pn_data_next

def pn_data_prev(*args):
  return _cproton.pn_data_prev(*args)
pn_data_prev = _cproton.pn_data_prev

def pn_data_enter(*args):
  return _cproton.pn_data_enter(*args)
pn_data_enter = _cproton.pn_data_enter

def pn_data_exit(*args):
  return _cproton.pn_data_exit(*args)
pn_data_exit = _cproton.pn_data_exit

def pn_data_lookup(*args):
  return _cproton.pn_data_lookup(*args)
pn_data_lookup = _cproton.pn_data_lookup

def pn_data_type(*args):
  return _cproton.pn_data_type(*args)
pn_data_type = _cproton.pn_data_type

def pn_data_print(*args):
  return _cproton.pn_data_print(*args)
pn_data_print = _cproton.pn_data_print

def pn_data_put_list(*args):
  return _cproton.pn_data_put_list(*args)
pn_data_put_list = _cproton.pn_data_put_list

def pn_data_put_map(*args):
  return _cproton.pn_data_put_map(*args)
pn_data_put_map = _cproton.pn_data_put_map

def pn_data_put_array(*args):
  return _cproton.pn_data_put_array(*args)
pn_data_put_array = _cproton.pn_data_put_array

def pn_data_put_described(*args):
  return _cproton.pn_data_put_described(*args)
pn_data_put_described = _cproton.pn_data_put_described

def pn_data_put_null(*args):
  return _cproton.pn_data_put_null(*args)
pn_data_put_null = _cproton.pn_data_put_null

def pn_data_put_bool(*args):
  return _cproton.pn_data_put_bool(*args)
pn_data_put_bool = _cproton.pn_data_put_bool

def pn_data_put_ubyte(*args):
  return _cproton.pn_data_put_ubyte(*args)
pn_data_put_ubyte = _cproton.pn_data_put_ubyte

def pn_data_put_byte(*args):
  return _cproton.pn_data_put_byte(*args)
pn_data_put_byte = _cproton.pn_data_put_byte

def pn_data_put_ushort(*args):
  return _cproton.pn_data_put_ushort(*args)
pn_data_put_ushort = _cproton.pn_data_put_ushort

def pn_data_put_short(*args):
  return _cproton.pn_data_put_short(*args)
pn_data_put_short = _cproton.pn_data_put_short

def pn_data_put_uint(*args):
  return _cproton.pn_data_put_uint(*args)
pn_data_put_uint = _cproton.pn_data_put_uint

def pn_data_put_int(*args):
  return _cproton.pn_data_put_int(*args)
pn_data_put_int = _cproton.pn_data_put_int

def pn_data_put_char(*args):
  return _cproton.pn_data_put_char(*args)
pn_data_put_char = _cproton.pn_data_put_char

def pn_data_put_ulong(*args):
  return _cproton.pn_data_put_ulong(*args)
pn_data_put_ulong = _cproton.pn_data_put_ulong

def pn_data_put_long(*args):
  return _cproton.pn_data_put_long(*args)
pn_data_put_long = _cproton.pn_data_put_long

def pn_data_put_timestamp(*args):
  return _cproton.pn_data_put_timestamp(*args)
pn_data_put_timestamp = _cproton.pn_data_put_timestamp

def pn_data_put_float(*args):
  return _cproton.pn_data_put_float(*args)
pn_data_put_float = _cproton.pn_data_put_float

def pn_data_put_double(*args):
  return _cproton.pn_data_put_double(*args)
pn_data_put_double = _cproton.pn_data_put_double

def pn_data_put_decimal32(*args):
  return _cproton.pn_data_put_decimal32(*args)
pn_data_put_decimal32 = _cproton.pn_data_put_decimal32

def pn_data_put_decimal64(*args):
  return _cproton.pn_data_put_decimal64(*args)
pn_data_put_decimal64 = _cproton.pn_data_put_decimal64

def pn_data_put_decimal128(*args):
  return _cproton.pn_data_put_decimal128(*args)
pn_data_put_decimal128 = _cproton.pn_data_put_decimal128

def pn_data_put_uuid(*args):
  return _cproton.pn_data_put_uuid(*args)
pn_data_put_uuid = _cproton.pn_data_put_uuid

def pn_data_put_binary(*args):
  return _cproton.pn_data_put_binary(*args)
pn_data_put_binary = _cproton.pn_data_put_binary

def pn_data_put_string(*args):
  return _cproton.pn_data_put_string(*args)
pn_data_put_string = _cproton.pn_data_put_string

def pn_data_put_symbol(*args):
  return _cproton.pn_data_put_symbol(*args)
pn_data_put_symbol = _cproton.pn_data_put_symbol

def pn_data_put_atom(*args):
  return _cproton.pn_data_put_atom(*args)
pn_data_put_atom = _cproton.pn_data_put_atom

def pn_data_get_list(*args):
  return _cproton.pn_data_get_list(*args)
pn_data_get_list = _cproton.pn_data_get_list

def pn_data_get_map(*args):
  return _cproton.pn_data_get_map(*args)
pn_data_get_map = _cproton.pn_data_get_map

def pn_data_get_array(*args):
  return _cproton.pn_data_get_array(*args)
pn_data_get_array = _cproton.pn_data_get_array

def pn_data_is_array_described(*args):
  return _cproton.pn_data_is_array_described(*args)
pn_data_is_array_described = _cproton.pn_data_is_array_described

def pn_data_get_array_type(*args):
  return _cproton.pn_data_get_array_type(*args)
pn_data_get_array_type = _cproton.pn_data_get_array_type

def pn_data_is_described(*args):
  return _cproton.pn_data_is_described(*args)
pn_data_is_described = _cproton.pn_data_is_described

def pn_data_is_null(*args):
  return _cproton.pn_data_is_null(*args)
pn_data_is_null = _cproton.pn_data_is_null

def pn_data_get_bool(*args):
  return _cproton.pn_data_get_bool(*args)
pn_data_get_bool = _cproton.pn_data_get_bool

def pn_data_get_ubyte(*args):
  return _cproton.pn_data_get_ubyte(*args)
pn_data_get_ubyte = _cproton.pn_data_get_ubyte

def pn_data_get_byte(*args):
  return _cproton.pn_data_get_byte(*args)
pn_data_get_byte = _cproton.pn_data_get_byte

def pn_data_get_ushort(*args):
  return _cproton.pn_data_get_ushort(*args)
pn_data_get_ushort = _cproton.pn_data_get_ushort

def pn_data_get_short(*args):
  return _cproton.pn_data_get_short(*args)
pn_data_get_short = _cproton.pn_data_get_short

def pn_data_get_uint(*args):
  return _cproton.pn_data_get_uint(*args)
pn_data_get_uint = _cproton.pn_data_get_uint

def pn_data_get_int(*args):
  return _cproton.pn_data_get_int(*args)
pn_data_get_int = _cproton.pn_data_get_int

def pn_data_get_char(*args):
  return _cproton.pn_data_get_char(*args)
pn_data_get_char = _cproton.pn_data_get_char

def pn_data_get_ulong(*args):
  return _cproton.pn_data_get_ulong(*args)
pn_data_get_ulong = _cproton.pn_data_get_ulong

def pn_data_get_long(*args):
  return _cproton.pn_data_get_long(*args)
pn_data_get_long = _cproton.pn_data_get_long

def pn_data_get_timestamp(*args):
  return _cproton.pn_data_get_timestamp(*args)
pn_data_get_timestamp = _cproton.pn_data_get_timestamp

def pn_data_get_float(*args):
  return _cproton.pn_data_get_float(*args)
pn_data_get_float = _cproton.pn_data_get_float

def pn_data_get_double(*args):
  return _cproton.pn_data_get_double(*args)
pn_data_get_double = _cproton.pn_data_get_double

def pn_data_get_decimal32(*args):
  return _cproton.pn_data_get_decimal32(*args)
pn_data_get_decimal32 = _cproton.pn_data_get_decimal32

def pn_data_get_decimal64(*args):
  return _cproton.pn_data_get_decimal64(*args)
pn_data_get_decimal64 = _cproton.pn_data_get_decimal64

def pn_data_get_decimal128(*args):
  return _cproton.pn_data_get_decimal128(*args)
pn_data_get_decimal128 = _cproton.pn_data_get_decimal128

def pn_data_get_uuid(*args):
  return _cproton.pn_data_get_uuid(*args)
pn_data_get_uuid = _cproton.pn_data_get_uuid

def pn_data_get_binary(*args):
  return _cproton.pn_data_get_binary(*args)
pn_data_get_binary = _cproton.pn_data_get_binary

def pn_data_get_string(*args):
  return _cproton.pn_data_get_string(*args)
pn_data_get_string = _cproton.pn_data_get_string

def pn_data_get_symbol(*args):
  return _cproton.pn_data_get_symbol(*args)
pn_data_get_symbol = _cproton.pn_data_get_symbol

def pn_data_get_bytes(*args):
  return _cproton.pn_data_get_bytes(*args)
pn_data_get_bytes = _cproton.pn_data_get_bytes

def pn_data_get_atom(*args):
  return _cproton.pn_data_get_atom(*args)
pn_data_get_atom = _cproton.pn_data_get_atom

def pn_data_copy(*args):
  return _cproton.pn_data_copy(*args)
pn_data_copy = _cproton.pn_data_copy

def pn_data_append(*args):
  return _cproton.pn_data_append(*args)
pn_data_append = _cproton.pn_data_append

def pn_data_appendn(*args):
  return _cproton.pn_data_appendn(*args)
pn_data_appendn = _cproton.pn_data_appendn

def pn_data_narrow(*args):
  return _cproton.pn_data_narrow(*args)
pn_data_narrow = _cproton.pn_data_narrow

def pn_data_widen(*args):
  return _cproton.pn_data_widen(*args)
pn_data_widen = _cproton.pn_data_widen

def pn_data_point(*args):
  return _cproton.pn_data_point(*args)
pn_data_point = _cproton.pn_data_point

def pn_data_restore(*args):
  return _cproton.pn_data_restore(*args)
pn_data_restore = _cproton.pn_data_restore

def pn_data_dump(*args):
  return _cproton.pn_data_dump(*args)
pn_data_dump = _cproton.pn_data_dump
# This file is compatible with both classic and new-style classes.


